{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/??.png","path":"img/??.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/???.png","path":"img/???.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/????.png","path":"img/????.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/?????.png","path":"img/?????.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"1c5454f1bcd942b3e418cf9fac349e6f22c54bf9","modified":1479868824000},{"_id":"themes/yelee/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1479871946000},{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1479871946000},{"_id":"themes/yelee/_config.yml","hash":"970733bc7c3f1aca1a1de3b04b51839018dc6e60","modified":1479890521000},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1479871946000},{"_id":"source/404/index.md","hash":"dd7946a59528c7af12cb755053953fabcf14af8e","modified":1479882862572},{"_id":"source/_posts/demo.md","hash":"b236aa0ab34c2135b61e54dacd47ca3de1f2eb6a","modified":1479714959939},{"_id":"source/_posts/hello-world.md","hash":"3a1a4524ec89a2a2c0b9f2a47a54c12ad825c4a6","modified":1479710866000},{"_id":"source/_posts/hexo changyong.md","hash":"133cab53beb776613bbbb3bdf295675c7fb33c64","modified":1479722626000},{"_id":"source/_posts/hexo node.md","hash":"133cab53beb776613bbbb3bdf295675c7fb33c64","modified":1479711521000},{"_id":"source/_posts/hexo??????.md","hash":"133cab53beb776613bbbb3bdf295675c7fb33c64","modified":1479711521000},{"_id":"source/_posts/html.md","hash":"a58e2aefd244e565e2beb1e9c83b36b02dab904d","modified":1479714443000},{"_id":"source/_posts/node-1-day.md","hash":"2033a8c158b5213c75532066cdb2e951109d00cb","modified":1479877291000},{"_id":"source/_posts/nodejs-into.md","hash":"453337cf77025e6f915fec71a9f27e8eb0c0d8a6","modified":1479877296000},{"_id":"source/_posts/shang.md","hash":"39e0046951d4e7e2c3548f974e7868dd9c40c5e8","modified":1479868532000},{"_id":"source/about/index.md","hash":"68ab9e7b4b2d06b2477002c4916087c58401f562","modified":1479876054427},{"_id":"source/tags/index.md","hash":"5aa40aaf268f1f92ce92f5a34ba27c515758d9bb","modified":1479874073231},{"_id":"themes/yelee/.github/ISSUE_TEMPLATE.md","hash":"09e2580d457ce93b4d7d554b75618036b45f8717","modified":1479871946000},{"_id":"themes/yelee/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1479871946000},{"_id":"themes/yelee/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1479871946000},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1479871946000},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1479871946000},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1479871946000},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1479871946000},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1479871946000},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1479871946000},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1479871946000},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1479871946000},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1479871946000},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1479871946000},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1479871946000},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1479871946000},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1479871946000},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1479871946000},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1479871946000},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1479871946000},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1479871946000},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1479871946000},{"_id":"themes/yelee/source/img/??.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1479871946000},{"_id":"themes/yelee/source/img/???.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1479871946000},{"_id":"themes/yelee/source/img/????.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1479871946000},{"_id":"themes/yelee/source/img/?????.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1479871946000},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1479871946000},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1479871946000},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1479871946000},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1479871946000},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1479871946000},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1479871946000},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1479871946000},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1479871946000},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1479871946000},{"_id":"themes/yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1479871946000},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1479871946000},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1479871946000},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1479871946000},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1479871946000},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1479871946000},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1479871946000},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1479871946000},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1479871946000},{"_id":"themes/yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1479871946000},{"_id":"themes/yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1479871946000},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1479871946000},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1479871946000},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1479871946000},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1479871946000},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1479871946000},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1479871946000},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1479871946000},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1479871946000},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1479871946000},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1479871946000},{"_id":"public/atom.xml","hash":"b1183cf41f564ee863ab4289445515763623b64d","modified":1479882956588},{"_id":"public/content.json","hash":"6ece7640e81c6391a45a50e0e2e165016ccdeda0","modified":1479882956776},{"_id":"public/about/index.html","hash":"3072436f6c85d15b478242127b5da8e9a7261600","modified":1479887357235},{"_id":"public/tags/index.html","hash":"38d975537f01b1548f57b5f7820f6e47c9a902bf","modified":1479887357236},{"_id":"public/archives/2015/index.html","hash":"4132a4c0bed217dc56992ea121f94a5b8ff3c9ab","modified":1479887357235},{"_id":"public/archives/2015/10/index.html","hash":"374b5261cb8d4dc8dfc1c39cc8c5da376acfdf16","modified":1479887357235},{"_id":"public/tags/css/index.html","hash":"07f6f65550a44f81f2c734bc8a047b15542287d7","modified":1479887357235},{"_id":"public/tags/nodejs/index.html","hash":"22314f301983494ee3d823beed93ae977a25a451","modified":1479887357236},{"_id":"public/tags/hexo/index.html","hash":"8523bdf1e845759b8aa4335ad9e79936d8c0d1ed","modified":1479887357236},{"_id":"public/tags/node/index.html","hash":"e1ff42438714d248c654b8930fa5f3f1f2c9b8eb","modified":1479887357236},{"_id":"public/tags/Another-Tag/index.html","hash":"518b2a60b50676ecbf30db79d1f54f02e56099a3","modified":1479887357236},{"_id":"public/tags/散文/index.html","hash":"be22198aa24be57a1983f2c01f70461bf1403598","modified":1479887357236},{"_id":"public/2016/11/21/node-1-day/index.html","hash":"f4eabc562ff849cf356b145ba2fb5045224f05a3","modified":1479887357236},{"_id":"public/2016/11/21/shang/index.html","hash":"896039cd81b69e2e2b5e99bfd035f075f3b71006","modified":1479887357236},{"_id":"public/2016/11/21/html/index.html","hash":"5c779d35adcba631fb47ff1d4c88c3e857c81dd8","modified":1479887357236},{"_id":"public/2016/11/21/hexo changyong/index.html","hash":"73aecd3a74d2e06abaa76f1181cb601f0e7decaf","modified":1479887357236},{"_id":"public/2016/11/21/hexo node/index.html","hash":"250895de0ce049b69943282779c4db47dda01fc6","modified":1479887357236},{"_id":"public/2016/11/21/hexo","hash":"768d59cd36c2d98c5140a1116acf08568f3051ed","modified":1479887357236},{"_id":"public/2016/11/21/hello-world/index.html","hash":"c96552ddb98c617e3b847a65a860061493a255e6","modified":1479887357236},{"_id":"public/2016/11/16/nodejs-into/index.html","hash":"d35d3421a20324b71119247f12faffed0434dd0b","modified":1479887357237},{"_id":"public/2015/10/21/demo/index.html","hash":"9dfb30dcade1bfd64eb53d47592cbe0726c8e9d6","modified":1479887357237},{"_id":"public/archives/index.html","hash":"c616a1caad70ba6dabc0dcf7658400f92fc66674","modified":1479887357237},{"_id":"public/archives/2016/index.html","hash":"dd75a012e1535bdef67e34986189faf28e9ccfc9","modified":1479887357237},{"_id":"public/archives/2016/11/index.html","hash":"c9c3354302479be6b670ec4ed2025b2c76a7260c","modified":1479887357237},{"_id":"public/index.html","hash":"bf7686c91fb34bb02c385823db2e382a750f4fa1","modified":1479887357237},{"_id":"public/404/index.html","hash":"bd2557d070f34dbf310e07266143331a704abd27","modified":1479887357234},{"_id":"public/CNAME","hash":"1c5454f1bcd942b3e418cf9fac349e6f22c54bf9","modified":1479882956826},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1479882956826},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1479882956826},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1479882956826},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1479882956826},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1479882956826},{"_id":"public/img/index.html","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1479882956826},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1479882956826},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1479882956826},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1479882956826},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1479882956826},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1479882956826},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1479882956826},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1479882956827},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1479882956827},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1479882956827},{"_id":"public/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1479882956827},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1479882956827},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1479882956827},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1479882956827},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1479882956827},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1479882956827},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1479882956827},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1479882956827},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1479882957864},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1479882957866},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1479882957866},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1479882957866},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1479882957866},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1479882957866},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1479882957867},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1479882957867},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1479882957867},{"_id":"public/css/style.css","hash":"e62c44a56606d8d75933cdf49a1a0e42d9f81845","modified":1479882957867},{"_id":"public/search.xml","hash":"7d908e79775b16942fe27e6fb4d1bdb44ed8b109","modified":1479887357236}],"Category":[],"Data":[],"Page":[{"title":"404","date":"2016-11-23T06:34:22.000Z","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2016-11-23 01:34:22\n---\n","updated":"2016-11-23T06:34:22.572Z","path":"404/index.html","comments":1,"layout":"page","_id":"civuk3osw0000lepvo102pg56","content":"","excerpt":"","more":""},{"title":"about","date":"2016-11-23T04:40:54.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-11-22 23:40:54\n---\n","updated":"2016-11-23T04:40:54.427Z","path":"about/index.html","comments":1,"layout":"page","_id":"civuk3ot10002lepvkkh3udk4","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-11-23T04:07:53.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-22 23:07:53\n---\n","updated":"2016-11-23T04:07:53.231Z","path":"tags/index.html","comments":1,"layout":"page","_id":"civuk3otb0005lepvjebdb0h1","content":"","excerpt":"","more":""}],"Post":[{"title":"辨析 Sass 中的 Map 和 List","date":"2015-10-21T14:34:12.000Z","_content":"\n如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。\n\n自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。\n\n那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 `package.json` 或者其他同类型的项目配置文件所控制，往往只需一条命令（`gem update sass`）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。\n\n<!-- more -->\n\n使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。\n\n## 测试表格\n\nVariable | Description\n--- | ---\n`site` | Sitewide information.\n`page` | Page specific information and custom variables set in front-matter.\n`config` | Site configuration\n`theme` | Theme configuration. Inherits from site configuration.\n`_` (single underscore) | [Lodash](http://lodash.com/) library\n`path` | Path of current page\n`url` | Full URL of current page\n`env` | Environment variables\n\n\n## 语法比较\n\n<div class=\"note\">\n    <h5>测试标题</h5>\n    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 `min-width`、`max-width`、`font-size` 和 `line-height` 四个样式。</p>\n</div>\n\n#### Map 语法\n\n下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。\n\n```sass\n$breakpoint-map: (\n    small: (\n        min-width: null,\n        max-width: 479px,\n        base-font: 16px,\n        vertical-rhythm: 1.3\n    ),\n    medium: (\n        min-width: 480px,\n        max-width: 959px,\n        base-font: 18px,\n        vertical-rhythm: 1.414\n    ),\n    large: (\n        min-width: 960px,\n        max-width: 1099px,\n        base-font: 18px,\n        vertical-rhythm: 1.5\n    ),\n    xlarge: (\n        min-width: 1100px,\n        max-width: null,\n        base-font: 21px,\n        vertical-rhythm: 1.618\n    )\n);\n```\n\n#### 多重列表语法\n\n下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 `nth()` 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。\n\n```sass\n$breakpoint-list: (\n    (small, null, 479px, 16px, 1.3),\n    (medium, 480px, 959px, 18px, 1.414),\n    (large, 960px, 1099px, 18px, 1.5),\n    (xlarge, 1100px, null, 21px, 1.618)\n);\n```\n\n## 遍历比较\n\n<div class=\"note info\">\n    <h5>测试标题</h5>\n    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p>\n</div>\n\n#### 遍历 Map\n\n我们可以使用如下的代码遍历 Map：\n\n```sass\n@each $label, $map in $breakpoint-map {}\n```\n\n这里的变量 `$label` 和 `$map` 会随着对 `$breakpoint-map` 的遍历被动态地赋值，`$label` 将会被赋值为 `$breakpoint-map` 的 Key，而 `$map` 会被赋值为 `$breakpoint-map` 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 `map-get()` 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。\n\n具体的做法就是使用 `@each` 遍历 Map，然后使用 `map-get()` 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：\n\n```sass\n@each $label, $map in $breakpoint-map {\n    $min-width: map-get($map, min-width);\n    $max-width: map-get($map, max-width);\n    $base-font: map-get($map, base-font);\n    $vertical-rhythm: map-get($map, vertical-rhythm);\n}\n```\n\n#### 遍历多重列表\n\n遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 `map-get()` 函数取特定值，直接遍历一遍即可获得特定值。\n\n因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 `map-get()`，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：\n\n```sass\n@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list {\n}\n```\n\n## 慎用多重列表\n\n<div class=\"note warning\">\n    <h5>测试标题</h5>\n    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p>\n</div>\n\n#### 遗漏键值\n\n如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：\n\n```sass\n$breakpoint-list: (\n    (small, null, 479px, 16px, 1.3),\n    (medium, 480px, 959px, 18px, 1.414),\n    (large, 960px, 1099px, 18px, 1.5),\n    (xlarge, 1100px, 21px, 1.618)\n);\n\np {\n    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list {\n        @if $min-width {\n            @include breakpoint( $min-width ) {\n                font-size: $base-font;\n                line-height: $vertical-rhythm;\n            }\n        } @else {\n            font-size: $base-font;\n            line-height: $vertical-rhythm;\n        }\n    }\n}\n```\n\n当我们尝试运行这段代码时，结果肯定是错误地，因为在 `$breakpoint-list` 的最后一行，`xlarge` 被赋值给了 `$label`，`1100px` 被赋值给了 `$min-width`，`21px` 被赋值给了 `$max-width`, `1.618` 被赋值给了 `$base-font`，最终导致 `$vertical-rhythm` 没有被赋值，结果就是 `font-size` 的属性值是错的，`line-height` 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。\n\n如果我们使用 Map 来代替这里的多重列表，那么使用 `map-get()` 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。\n\n#### 查找特定列表\n\n在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 `map-get()` 函数可以快速定位到特定子 Map：\n\n```sass\n$medium-map: map-get($maps, medium);\n```\n\n但如果要获取多种列表 `medium` 列表，麻烦可就大了：\n\n```sass\n@function get-list($label) {\n    @each $list in $breakpoint-list {\n        @if nth($list, 1) == $label {\n            @return $list;\n        }\n    }\n    @return null;\n}\n$medium-list: get-list(medium);\n```\n\n这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 `null`。这实际上就是手工实现了 `map-get()` 的逻辑。\n\n#### 缺少原生的 Map 函数\n\nSass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 `map-merge()` 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 `join()` 或 `append()` 来增加新列表，从而模拟出 `map-merge()` 的效果。\n\n另一个实用的 Map 函数就是 `map-has-key()`，对于依赖 `map-get()` 的自定义函数来说，`map-has-key()` 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。\n\n## 总结\n\n<div class=\"note unreleased\">\n    <h5>Test Title</h5>\n    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p>\n</div>\n\n虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。\n","source":"_posts/demo.md","raw":"title: 辨析 Sass 中的 Map 和 List\ndate: 2015-10-21 10:34:12\ntags:\n- css\n---\n\n如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。\n\n自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。\n\n那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 `package.json` 或者其他同类型的项目配置文件所控制，往往只需一条命令（`gem update sass`）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。\n\n<!-- more -->\n\n使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。\n\n## 测试表格\n\nVariable | Description\n--- | ---\n`site` | Sitewide information.\n`page` | Page specific information and custom variables set in front-matter.\n`config` | Site configuration\n`theme` | Theme configuration. Inherits from site configuration.\n`_` (single underscore) | [Lodash](http://lodash.com/) library\n`path` | Path of current page\n`url` | Full URL of current page\n`env` | Environment variables\n\n\n## 语法比较\n\n<div class=\"note\">\n    <h5>测试标题</h5>\n    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 `min-width`、`max-width`、`font-size` 和 `line-height` 四个样式。</p>\n</div>\n\n#### Map 语法\n\n下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。\n\n```sass\n$breakpoint-map: (\n    small: (\n        min-width: null,\n        max-width: 479px,\n        base-font: 16px,\n        vertical-rhythm: 1.3\n    ),\n    medium: (\n        min-width: 480px,\n        max-width: 959px,\n        base-font: 18px,\n        vertical-rhythm: 1.414\n    ),\n    large: (\n        min-width: 960px,\n        max-width: 1099px,\n        base-font: 18px,\n        vertical-rhythm: 1.5\n    ),\n    xlarge: (\n        min-width: 1100px,\n        max-width: null,\n        base-font: 21px,\n        vertical-rhythm: 1.618\n    )\n);\n```\n\n#### 多重列表语法\n\n下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 `nth()` 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。\n\n```sass\n$breakpoint-list: (\n    (small, null, 479px, 16px, 1.3),\n    (medium, 480px, 959px, 18px, 1.414),\n    (large, 960px, 1099px, 18px, 1.5),\n    (xlarge, 1100px, null, 21px, 1.618)\n);\n```\n\n## 遍历比较\n\n<div class=\"note info\">\n    <h5>测试标题</h5>\n    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p>\n</div>\n\n#### 遍历 Map\n\n我们可以使用如下的代码遍历 Map：\n\n```sass\n@each $label, $map in $breakpoint-map {}\n```\n\n这里的变量 `$label` 和 `$map` 会随着对 `$breakpoint-map` 的遍历被动态地赋值，`$label` 将会被赋值为 `$breakpoint-map` 的 Key，而 `$map` 会被赋值为 `$breakpoint-map` 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 `map-get()` 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。\n\n具体的做法就是使用 `@each` 遍历 Map，然后使用 `map-get()` 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：\n\n```sass\n@each $label, $map in $breakpoint-map {\n    $min-width: map-get($map, min-width);\n    $max-width: map-get($map, max-width);\n    $base-font: map-get($map, base-font);\n    $vertical-rhythm: map-get($map, vertical-rhythm);\n}\n```\n\n#### 遍历多重列表\n\n遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 `map-get()` 函数取特定值，直接遍历一遍即可获得特定值。\n\n因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 `map-get()`，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：\n\n```sass\n@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list {\n}\n```\n\n## 慎用多重列表\n\n<div class=\"note warning\">\n    <h5>测试标题</h5>\n    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p>\n</div>\n\n#### 遗漏键值\n\n如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：\n\n```sass\n$breakpoint-list: (\n    (small, null, 479px, 16px, 1.3),\n    (medium, 480px, 959px, 18px, 1.414),\n    (large, 960px, 1099px, 18px, 1.5),\n    (xlarge, 1100px, 21px, 1.618)\n);\n\np {\n    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list {\n        @if $min-width {\n            @include breakpoint( $min-width ) {\n                font-size: $base-font;\n                line-height: $vertical-rhythm;\n            }\n        } @else {\n            font-size: $base-font;\n            line-height: $vertical-rhythm;\n        }\n    }\n}\n```\n\n当我们尝试运行这段代码时，结果肯定是错误地，因为在 `$breakpoint-list` 的最后一行，`xlarge` 被赋值给了 `$label`，`1100px` 被赋值给了 `$min-width`，`21px` 被赋值给了 `$max-width`, `1.618` 被赋值给了 `$base-font`，最终导致 `$vertical-rhythm` 没有被赋值，结果就是 `font-size` 的属性值是错的，`line-height` 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。\n\n如果我们使用 Map 来代替这里的多重列表，那么使用 `map-get()` 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。\n\n#### 查找特定列表\n\n在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 `map-get()` 函数可以快速定位到特定子 Map：\n\n```sass\n$medium-map: map-get($maps, medium);\n```\n\n但如果要获取多种列表 `medium` 列表，麻烦可就大了：\n\n```sass\n@function get-list($label) {\n    @each $list in $breakpoint-list {\n        @if nth($list, 1) == $label {\n            @return $list;\n        }\n    }\n    @return null;\n}\n$medium-list: get-list(medium);\n```\n\n这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 `null`。这实际上就是手工实现了 `map-get()` 的逻辑。\n\n#### 缺少原生的 Map 函数\n\nSass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 `map-merge()` 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 `join()` 或 `append()` 来增加新列表，从而模拟出 `map-merge()` 的效果。\n\n另一个实用的 Map 函数就是 `map-has-key()`，对于依赖 `map-get()` 的自定义函数来说，`map-has-key()` 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。\n\n## 总结\n\n<div class=\"note unreleased\">\n    <h5>Test Title</h5>\n    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p>\n</div>\n\n虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。\n","slug":"demo","published":1,"updated":"2016-11-21T07:55:59.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civuk3osy0001lepvj5n6f6e0","content":"<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p>\n<p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p>\n<p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p>\n<a id=\"more\"></a>\n<p>使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。</p>\n<h2 id=\"测试表格\"><a href=\"#测试表格\" class=\"headerlink\" title=\"测试表格\"></a>测试表格</h2><table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>site</code></td>\n<td>Sitewide information.</td>\n</tr>\n<tr>\n<td><code>page</code></td>\n<td>Page specific information and custom variables set in front-matter.</td>\n</tr>\n<tr>\n<td><code>config</code></td>\n<td>Site configuration</td>\n</tr>\n<tr>\n<td><code>theme</code></td>\n<td>Theme configuration. Inherits from site configuration.</td>\n</tr>\n<tr>\n<td><code>_</code> (single underscore)</td>\n<td><a href=\"http://lodash.com/\" target=\"_blank\" rel=\"external\">Lodash</a> library</td>\n</tr>\n<tr>\n<td><code>path</code></td>\n<td>Path of current page</td>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td>Full URL of current page</td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td>Environment variables</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"语法比较\"><a href=\"#语法比较\" class=\"headerlink\" title=\"语法比较\"></a>语法比较</h2><div class=\"note\"><br>    <h5>测试标题</h5><br>    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 <code>min-width</code>、<code>max-width</code>、<code>font-size</code> 和 <code>line-height</code> 四个样式。</p><br></div>\n\n<h4 id=\"Map-语法\"><a href=\"#Map-语法\" class=\"headerlink\" title=\"Map 语法\"></a>Map 语法</h4><p>下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">$breakpoint-map: (</div><div class=\"line\">    small: (</div><div class=\"line\">        min-width: null,</div><div class=\"line\">        max-width: 479px,</div><div class=\"line\">        base-font: 16px,</div><div class=\"line\">        vertical-rhythm: 1.3</div><div class=\"line\">    ),</div><div class=\"line\">    medium: (</div><div class=\"line\">        min-width: 480px,</div><div class=\"line\">        max-width: 959px,</div><div class=\"line\">        base-font: 18px,</div><div class=\"line\">        vertical-rhythm: 1.414</div><div class=\"line\">    ),</div><div class=\"line\">    large: (</div><div class=\"line\">        min-width: 960px,</div><div class=\"line\">        max-width: 1099px,</div><div class=\"line\">        base-font: 18px,</div><div class=\"line\">        vertical-rhythm: 1.5</div><div class=\"line\">    ),</div><div class=\"line\">    xlarge: (</div><div class=\"line\">        min-width: 1100px,</div><div class=\"line\">        max-width: null,</div><div class=\"line\">        base-font: 21px,</div><div class=\"line\">        vertical-rhythm: 1.618</div><div class=\"line\">    )</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h4 id=\"多重列表语法\"><a href=\"#多重列表语法\" class=\"headerlink\" title=\"多重列表语法\"></a>多重列表语法</h4><p>下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 <code>nth()</code> 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$breakpoint-list: (</div><div class=\"line\">    (small, null, 479px, 16px, 1.3),</div><div class=\"line\">    (medium, 480px, 959px, 18px, 1.414),</div><div class=\"line\">    (large, 960px, 1099px, 18px, 1.5),</div><div class=\"line\">    (xlarge, 1100px, null, 21px, 1.618)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h2 id=\"遍历比较\"><a href=\"#遍历比较\" class=\"headerlink\" title=\"遍历比较\"></a>遍历比较</h2><div class=\"note info\"><br>    <h5>测试标题</h5><br>    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p><br></div>\n\n<h4 id=\"遍历-Map\"><a href=\"#遍历-Map\" class=\"headerlink\" title=\"遍历 Map\"></a>遍历 Map</h4><p>我们可以使用如下的代码遍历 Map：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@each $label, $map in $breakpoint-map &#123;&#125;</div></pre></td></tr></table></figure>\n<p>这里的变量 <code>$label</code> 和 <code>$map</code> 会随着对 <code>$breakpoint-map</code> 的遍历被动态地赋值，<code>$label</code> 将会被赋值为 <code>$breakpoint-map</code> 的 Key，而 <code>$map</code> 会被赋值为 <code>$breakpoint-map</code> 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 <code>map-get()</code> 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。</p>\n<p>具体的做法就是使用 <code>@each</code> 遍历 Map，然后使用 <code>map-get()</code> 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@each $label, $map in $breakpoint-map &#123;</div><div class=\"line\">    $min-width: map-get($map, min-width);</div><div class=\"line\">    $max-width: map-get($map, max-width);</div><div class=\"line\">    $base-font: map-get($map, base-font);</div><div class=\"line\">    $vertical-rhythm: map-get($map, vertical-rhythm);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"遍历多重列表\"><a href=\"#遍历多重列表\" class=\"headerlink\" title=\"遍历多重列表\"></a>遍历多重列表</h4><p>遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 <code>map-get()</code> 函数取特定值，直接遍历一遍即可获得特定值。</p>\n<p>因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 <code>map-get()</code>，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"慎用多重列表\"><a href=\"#慎用多重列表\" class=\"headerlink\" title=\"慎用多重列表\"></a>慎用多重列表</h2><div class=\"note warning\"><br>    <h5>测试标题</h5><br>    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p><br></div>\n\n<h4 id=\"遗漏键值\"><a href=\"#遗漏键值\" class=\"headerlink\" title=\"遗漏键值\"></a>遗漏键值</h4><p>如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$breakpoint-list: (</div><div class=\"line\">    (small, null, 479px, 16px, 1.3),</div><div class=\"line\">    (medium, 480px, 959px, 18px, 1.414),</div><div class=\"line\">    (large, 960px, 1099px, 18px, 1.5),</div><div class=\"line\">    (xlarge, 1100px, 21px, 1.618)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">p &#123;</div><div class=\"line\">    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</div><div class=\"line\">        @if $min-width &#123;</div><div class=\"line\">            @include breakpoint( $min-width ) &#123;</div><div class=\"line\">                font-size: $base-font;</div><div class=\"line\">                line-height: $vertical-rhythm;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; @else &#123;</div><div class=\"line\">            font-size: $base-font;</div><div class=\"line\">            line-height: $vertical-rhythm;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当我们尝试运行这段代码时，结果肯定是错误地，因为在 <code>$breakpoint-list</code> 的最后一行，<code>xlarge</code> 被赋值给了 <code>$label</code>，<code>1100px</code> 被赋值给了 <code>$min-width</code>，<code>21px</code> 被赋值给了 <code>$max-width</code>, <code>1.618</code> 被赋值给了 <code>$base-font</code>，最终导致 <code>$vertical-rhythm</code> 没有被赋值，结果就是 <code>font-size</code> 的属性值是错的，<code>line-height</code> 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。</p>\n<p>如果我们使用 Map 来代替这里的多重列表，那么使用 <code>map-get()</code> 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。</p>\n<h4 id=\"查找特定列表\"><a href=\"#查找特定列表\" class=\"headerlink\" title=\"查找特定列表\"></a>查找特定列表</h4><p>在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 <code>map-get()</code> 函数可以快速定位到特定子 Map：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$medium-map: map-get($maps, medium);</div></pre></td></tr></table></figure>\n<p>但如果要获取多种列表 <code>medium</code> 列表，麻烦可就大了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">@function get-list($label) &#123;</div><div class=\"line\">    @each $list in $breakpoint-list &#123;</div><div class=\"line\">        @if nth($list, 1) == $label &#123;</div><div class=\"line\">            @return $list;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @return null;</div><div class=\"line\">&#125;</div><div class=\"line\">$medium-list: get-list(medium);</div></pre></td></tr></table></figure>\n<p>这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 <code>null</code>。这实际上就是手工实现了 <code>map-get()</code> 的逻辑。</p>\n<h4 id=\"缺少原生的-Map-函数\"><a href=\"#缺少原生的-Map-函数\" class=\"headerlink\" title=\"缺少原生的 Map 函数\"></a>缺少原生的 Map 函数</h4><p>Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 <code>map-merge()</code> 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 <code>join()</code> 或 <code>append()</code> 来增加新列表，从而模拟出 <code>map-merge()</code> 的效果。</p>\n<p>另一个实用的 Map 函数就是 <code>map-has-key()</code>，对于依赖 <code>map-get()</code> 的自定义函数来说，<code>map-has-key()</code> 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><div class=\"note unreleased\"><br>    <h5>Test Title</h5><br>    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p><br></div>\n\n<p>虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。</p>\n","excerpt":"<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p>\n<p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p>\n<p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p>","more":"<p>使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。</p>\n<h2 id=\"测试表格\"><a href=\"#测试表格\" class=\"headerlink\" title=\"测试表格\"></a>测试表格</h2><table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>site</code></td>\n<td>Sitewide information.</td>\n</tr>\n<tr>\n<td><code>page</code></td>\n<td>Page specific information and custom variables set in front-matter.</td>\n</tr>\n<tr>\n<td><code>config</code></td>\n<td>Site configuration</td>\n</tr>\n<tr>\n<td><code>theme</code></td>\n<td>Theme configuration. Inherits from site configuration.</td>\n</tr>\n<tr>\n<td><code>_</code> (single underscore)</td>\n<td><a href=\"http://lodash.com/\">Lodash</a> library</td>\n</tr>\n<tr>\n<td><code>path</code></td>\n<td>Path of current page</td>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td>Full URL of current page</td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td>Environment variables</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"语法比较\"><a href=\"#语法比较\" class=\"headerlink\" title=\"语法比较\"></a>语法比较</h2><div class=\"note\"><br>    <h5>测试标题</h5><br>    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 <code>min-width</code>、<code>max-width</code>、<code>font-size</code> 和 <code>line-height</code> 四个样式。</p><br></div>\n\n<h4 id=\"Map-语法\"><a href=\"#Map-语法\" class=\"headerlink\" title=\"Map 语法\"></a>Map 语法</h4><p>下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">$breakpoint-map: (</div><div class=\"line\">    small: (</div><div class=\"line\">        min-width: null,</div><div class=\"line\">        max-width: 479px,</div><div class=\"line\">        base-font: 16px,</div><div class=\"line\">        vertical-rhythm: 1.3</div><div class=\"line\">    ),</div><div class=\"line\">    medium: (</div><div class=\"line\">        min-width: 480px,</div><div class=\"line\">        max-width: 959px,</div><div class=\"line\">        base-font: 18px,</div><div class=\"line\">        vertical-rhythm: 1.414</div><div class=\"line\">    ),</div><div class=\"line\">    large: (</div><div class=\"line\">        min-width: 960px,</div><div class=\"line\">        max-width: 1099px,</div><div class=\"line\">        base-font: 18px,</div><div class=\"line\">        vertical-rhythm: 1.5</div><div class=\"line\">    ),</div><div class=\"line\">    xlarge: (</div><div class=\"line\">        min-width: 1100px,</div><div class=\"line\">        max-width: null,</div><div class=\"line\">        base-font: 21px,</div><div class=\"line\">        vertical-rhythm: 1.618</div><div class=\"line\">    )</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h4 id=\"多重列表语法\"><a href=\"#多重列表语法\" class=\"headerlink\" title=\"多重列表语法\"></a>多重列表语法</h4><p>下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 <code>nth()</code> 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$breakpoint-list: (</div><div class=\"line\">    (small, null, 479px, 16px, 1.3),</div><div class=\"line\">    (medium, 480px, 959px, 18px, 1.414),</div><div class=\"line\">    (large, 960px, 1099px, 18px, 1.5),</div><div class=\"line\">    (xlarge, 1100px, null, 21px, 1.618)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h2 id=\"遍历比较\"><a href=\"#遍历比较\" class=\"headerlink\" title=\"遍历比较\"></a>遍历比较</h2><div class=\"note info\"><br>    <h5>测试标题</h5><br>    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p><br></div>\n\n<h4 id=\"遍历-Map\"><a href=\"#遍历-Map\" class=\"headerlink\" title=\"遍历 Map\"></a>遍历 Map</h4><p>我们可以使用如下的代码遍历 Map：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@each $label, $map in $breakpoint-map &#123;&#125;</div></pre></td></tr></table></figure>\n<p>这里的变量 <code>$label</code> 和 <code>$map</code> 会随着对 <code>$breakpoint-map</code> 的遍历被动态地赋值，<code>$label</code> 将会被赋值为 <code>$breakpoint-map</code> 的 Key，而 <code>$map</code> 会被赋值为 <code>$breakpoint-map</code> 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 <code>map-get()</code> 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。</p>\n<p>具体的做法就是使用 <code>@each</code> 遍历 Map，然后使用 <code>map-get()</code> 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@each $label, $map in $breakpoint-map &#123;</div><div class=\"line\">    $min-width: map-get($map, min-width);</div><div class=\"line\">    $max-width: map-get($map, max-width);</div><div class=\"line\">    $base-font: map-get($map, base-font);</div><div class=\"line\">    $vertical-rhythm: map-get($map, vertical-rhythm);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"遍历多重列表\"><a href=\"#遍历多重列表\" class=\"headerlink\" title=\"遍历多重列表\"></a>遍历多重列表</h4><p>遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 <code>map-get()</code> 函数取特定值，直接遍历一遍即可获得特定值。</p>\n<p>因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 <code>map-get()</code>，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"慎用多重列表\"><a href=\"#慎用多重列表\" class=\"headerlink\" title=\"慎用多重列表\"></a>慎用多重列表</h2><div class=\"note warning\"><br>    <h5>测试标题</h5><br>    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p><br></div>\n\n<h4 id=\"遗漏键值\"><a href=\"#遗漏键值\" class=\"headerlink\" title=\"遗漏键值\"></a>遗漏键值</h4><p>如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$breakpoint-list: (</div><div class=\"line\">    (small, null, 479px, 16px, 1.3),</div><div class=\"line\">    (medium, 480px, 959px, 18px, 1.414),</div><div class=\"line\">    (large, 960px, 1099px, 18px, 1.5),</div><div class=\"line\">    (xlarge, 1100px, 21px, 1.618)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">p &#123;</div><div class=\"line\">    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</div><div class=\"line\">        @if $min-width &#123;</div><div class=\"line\">            @include breakpoint( $min-width ) &#123;</div><div class=\"line\">                font-size: $base-font;</div><div class=\"line\">                line-height: $vertical-rhythm;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; @else &#123;</div><div class=\"line\">            font-size: $base-font;</div><div class=\"line\">            line-height: $vertical-rhythm;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当我们尝试运行这段代码时，结果肯定是错误地，因为在 <code>$breakpoint-list</code> 的最后一行，<code>xlarge</code> 被赋值给了 <code>$label</code>，<code>1100px</code> 被赋值给了 <code>$min-width</code>，<code>21px</code> 被赋值给了 <code>$max-width</code>, <code>1.618</code> 被赋值给了 <code>$base-font</code>，最终导致 <code>$vertical-rhythm</code> 没有被赋值，结果就是 <code>font-size</code> 的属性值是错的，<code>line-height</code> 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。</p>\n<p>如果我们使用 Map 来代替这里的多重列表，那么使用 <code>map-get()</code> 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。</p>\n<h4 id=\"查找特定列表\"><a href=\"#查找特定列表\" class=\"headerlink\" title=\"查找特定列表\"></a>查找特定列表</h4><p>在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 <code>map-get()</code> 函数可以快速定位到特定子 Map：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$medium-map: map-get($maps, medium);</div></pre></td></tr></table></figure>\n<p>但如果要获取多种列表 <code>medium</code> 列表，麻烦可就大了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">@function get-list($label) &#123;</div><div class=\"line\">    @each $list in $breakpoint-list &#123;</div><div class=\"line\">        @if nth($list, 1) == $label &#123;</div><div class=\"line\">            @return $list;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @return null;</div><div class=\"line\">&#125;</div><div class=\"line\">$medium-list: get-list(medium);</div></pre></td></tr></table></figure>\n<p>这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 <code>null</code>。这实际上就是手工实现了 <code>map-get()</code> 的逻辑。</p>\n<h4 id=\"缺少原生的-Map-函数\"><a href=\"#缺少原生的-Map-函数\" class=\"headerlink\" title=\"缺少原生的 Map 函数\"></a>缺少原生的 Map 函数</h4><p>Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 <code>map-merge()</code> 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 <code>join()</code> 或 <code>append()</code> 来增加新列表，从而模拟出 <code>map-merge()</code> 的效果。</p>\n<p>另一个实用的 Map 函数就是 <code>map-has-key()</code>，对于依赖 <code>map-get()</code> 的自定义函数来说，<code>map-has-key()</code> 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><div class=\"note unreleased\"><br>    <h5>Test Title</h5><br>    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p><br></div>\n\n<p>虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。</p>"},{"title":"Hello World","date":"2016-11-21T17:42:18.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-11-21 12:42:18\ntags: nodejs\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2016-11-21T06:47:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civuk3ot20003lepve3f42mum","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.<br><a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>","more":"</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"hexo常用命令笔记","date":"2016-11-21T19:24:29.000Z","_content":"hexo\nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化\n<!--more-->\n简写\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n\n服务器\nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\n\n监视文件变动\nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n\n完成后部署\n两个命令的作用是相同的\nhexo generate --deploy\nhexo deploy --generate\nhexo deploy -g\nhexo server -g\n\n草稿\nhexo publish [layout] < title >\n\n模版\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] < title >\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n\n变量  描述\nlayout  布局\ntitle   标题\ndate    文件建立日期\ntitle: 使用Hexo搭建个人博客\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n模版（Scaffold）\nhexo new photo \"My Gallery\"\n\n变量  描述\nlayout  布局\ntitle   标题\ndate    文件建立日期\n设置文章摘要\n以上是文章摘要 <! -- more -- > 以下是余下全文 \n写作\nhexo new page < title>\nhexo new post < title>\n\n变量  描述\n:title  标题\n:year   建立的年份（4 位数）\n:month  建立的月份（2 位数）\n:i_month    建立的月份（去掉开头的零）\n:day    建立的日期（2 位数）\n:i_day  建立的日期（去掉开头的零）\n推送到服务器上\nhexo n #写文章\nhexo g #生成\nhexo d #部署 #可与hexo g合并为 hexo d -g","source":"_posts/hexo changyong.md","raw":"---\ntitle: hexo常用命令笔记\ndate: 2016-11-21 14:24:29\ntags: hexo\n---\nhexo\nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化\n<!--more-->\n简写\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n\n服务器\nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\n\n监视文件变动\nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n\n完成后部署\n两个命令的作用是相同的\nhexo generate --deploy\nhexo deploy --generate\nhexo deploy -g\nhexo server -g\n\n草稿\nhexo publish [layout] < title >\n\n模版\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] < title >\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n\n变量  描述\nlayout  布局\ntitle   标题\ndate    文件建立日期\ntitle: 使用Hexo搭建个人博客\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n模版（Scaffold）\nhexo new photo \"My Gallery\"\n\n变量  描述\nlayout  布局\ntitle   标题\ndate    文件建立日期\n设置文章摘要\n以上是文章摘要 <! -- more -- > 以下是余下全文 \n写作\nhexo new page < title>\nhexo new post < title>\n\n变量  描述\n:title  标题\n:year   建立的年份（4 位数）\n:month  建立的月份（2 位数）\n:i_month    建立的月份（去掉开头的零）\n:day    建立的日期（2 位数）\n:i_day  建立的日期（去掉开头的零）\n推送到服务器上\nhexo n #写文章\nhexo g #生成\nhexo d #部署 #可与hexo g合并为 hexo d -g","slug":"hexo changyong","published":1,"updated":"2016-11-21T10:03:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civuk3otc0006lepvpqk99ufj","content":"<p>hexo<br>npm install hexo -g #安装<br>npm update hexo -g #升级<br>hexo init #初始化<br><a id=\"more\"></a><br>简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo p == hexo publish<br>hexo g == hexo generate#生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy#部署</p>\n<p>服务器<br>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP</p>\n<p>hexo clean #清除缓存 网页正常情况下可以忽略此条命令<br>hexo g #生成静态网页<br>hexo d #开始部署</p>\n<p>监视文件变动<br>hexo generate #使用 Hexo 生成静态文件快速而且简单<br>hexo generate –watch #监视文件变动</p>\n<p>完成后部署<br>两个命令的作用是相同的<br>hexo generate –deploy<br>hexo deploy –generate<br>hexo deploy -g<br>hexo server -g</p>\n<p>草稿<br>hexo publish [layout] &lt; title &gt;</p>\n<p>模版<br>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #将.deploy目录部署到GitHub</p>\n<p>hexo new [layout] &lt; title &gt;<br>hexo new photo “My Gallery”<br>hexo new “Hello World” –lang tw</p>\n<p>变量  描述<br>layout  布局<br>title   标题<br>date    文件建立日期<br>title: 使用Hexo搭建个人博客<br>layout: post<br>date: 2014-03-03 19:07:43<br>comments: true<br>categories: Blog<br>tags: [Hexo]<br>keywords: Hexo, Blog<br>description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。<br>模版（Scaffold）<br>hexo new photo “My Gallery”</p>\n<p>变量  描述<br>layout  布局<br>title   标题<br>date    文件建立日期<br>设置文章摘要<br>以上是文章摘要 &lt;! – more – &gt; 以下是余下全文<br>写作<br>hexo new page &lt; title&gt;<br>hexo new post &lt; title&gt;</p>\n<p>变量  描述<br>:title  标题<br>:year   建立的年份（4 位数）<br>:month  建立的月份（2 位数）<br>:i_month    建立的月份（去掉开头的零）<br>:day    建立的日期（2 位数）<br>:i_day  建立的日期（去掉开头的零）<br>推送到服务器上<br>hexo n #写文章<br>hexo g #生成<br>hexo d #部署 #可与hexo g合并为 hexo d -g</p>\n","excerpt":"<p>hexo<br>npm install hexo -g #安装<br>npm update hexo -g #升级<br>hexo init #初始化<br>","more":"<br>简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo p == hexo publish<br>hexo g == hexo generate#生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy#部署</p>\n<p>服务器<br>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP</p>\n<p>hexo clean #清除缓存 网页正常情况下可以忽略此条命令<br>hexo g #生成静态网页<br>hexo d #开始部署</p>\n<p>监视文件变动<br>hexo generate #使用 Hexo 生成静态文件快速而且简单<br>hexo generate –watch #监视文件变动</p>\n<p>完成后部署<br>两个命令的作用是相同的<br>hexo generate –deploy<br>hexo deploy –generate<br>hexo deploy -g<br>hexo server -g</p>\n<p>草稿<br>hexo publish [layout] &lt; title &gt;</p>\n<p>模版<br>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #将.deploy目录部署到GitHub</p>\n<p>hexo new [layout] &lt; title &gt;<br>hexo new photo “My Gallery”<br>hexo new “Hello World” –lang tw</p>\n<p>变量  描述<br>layout  布局<br>title   标题<br>date    文件建立日期<br>title: 使用Hexo搭建个人博客<br>layout: post<br>date: 2014-03-03 19:07:43<br>comments: true<br>categories: Blog<br>tags: [Hexo]<br>keywords: Hexo, Blog<br>description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。<br>模版（Scaffold）<br>hexo new photo “My Gallery”</p>\n<p>变量  描述<br>layout  布局<br>title   标题<br>date    文件建立日期<br>设置文章摘要<br>以上是文章摘要 &lt;! – more – &gt; 以下是余下全文<br>写作<br>hexo new page &lt; title&gt;<br>hexo new post &lt; title&gt;</p>\n<p>变量  描述<br>:title  标题<br>:year   建立的年份（4 位数）<br>:month  建立的月份（2 位数）<br>:i_month    建立的月份（去掉开头的零）<br>:day    建立的日期（2 位数）<br>:i_day  建立的日期（去掉开头的零）<br>推送到服务器上<br>hexo n #写文章<br>hexo g #生成<br>hexo d #部署 #可与hexo g合并为 hexo d -g</p>"},{"title":"hexo常用命令笔记","date":"2016-11-21T19:24:29.000Z","_content":"hexo\nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化\n<!--more-->\n简写\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n\n服务器\nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\n\n监视文件变动\nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n\n完成后部署\n两个命令的作用是相同的\nhexo generate --deploy\nhexo deploy --generate\nhexo deploy -g\nhexo server -g\n\n草稿\nhexo publish [layout] < title >\n\n模版\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] < title >\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n\n变量  描述\nlayout  布局\ntitle   标题\ndate    文件建立日期\ntitle: 使用Hexo搭建个人博客\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n模版（Scaffold）\nhexo new photo \"My Gallery\"\n\n变量  描述\nlayout  布局\ntitle   标题\ndate    文件建立日期\n设置文章摘要\n以上是文章摘要 <! -- more -- > 以下是余下全文 \n写作\nhexo new page < title>\nhexo new post < title>\n\n变量  描述\n:title  标题\n:year   建立的年份（4 位数）\n:month  建立的月份（2 位数）\n:i_month    建立的月份（去掉开头的零）\n:day    建立的日期（2 位数）\n:i_day  建立的日期（去掉开头的零）\n推送到服务器上\nhexo n #写文章\nhexo g #生成\nhexo d #部署 #可与hexo g合并为 hexo d -g","source":"_posts/hexo node.md","raw":"---\ntitle: hexo常用命令笔记\ndate: 2016-11-21 14:24:29\ntags: hexo\n---\nhexo\nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化\n<!--more-->\n简写\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n\n服务器\nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\n\n监视文件变动\nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n\n完成后部署\n两个命令的作用是相同的\nhexo generate --deploy\nhexo deploy --generate\nhexo deploy -g\nhexo server -g\n\n草稿\nhexo publish [layout] < title >\n\n模版\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] < title >\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n\n变量  描述\nlayout  布局\ntitle   标题\ndate    文件建立日期\ntitle: 使用Hexo搭建个人博客\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n模版（Scaffold）\nhexo new photo \"My Gallery\"\n\n变量  描述\nlayout  布局\ntitle   标题\ndate    文件建立日期\n设置文章摘要\n以上是文章摘要 <! -- more -- > 以下是余下全文 \n写作\nhexo new page < title>\nhexo new post < title>\n\n变量  描述\n:title  标题\n:year   建立的年份（4 位数）\n:month  建立的月份（2 位数）\n:i_month    建立的月份（去掉开头的零）\n:day    建立的日期（2 位数）\n:i_day  建立的日期（去掉开头的零）\n推送到服务器上\nhexo n #写文章\nhexo g #生成\nhexo d #部署 #可与hexo g合并为 hexo d -g","slug":"hexo node","published":1,"updated":"2016-11-21T06:58:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civuk3otd0007lepv4ggrs0r1","content":"<p>hexo<br>npm install hexo -g #安装<br>npm update hexo -g #升级<br>hexo init #初始化<br><a id=\"more\"></a><br>简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo p == hexo publish<br>hexo g == hexo generate#生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy#部署</p>\n<p>服务器<br>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP</p>\n<p>hexo clean #清除缓存 网页正常情况下可以忽略此条命令<br>hexo g #生成静态网页<br>hexo d #开始部署</p>\n<p>监视文件变动<br>hexo generate #使用 Hexo 生成静态文件快速而且简单<br>hexo generate –watch #监视文件变动</p>\n<p>完成后部署<br>两个命令的作用是相同的<br>hexo generate –deploy<br>hexo deploy –generate<br>hexo deploy -g<br>hexo server -g</p>\n<p>草稿<br>hexo publish [layout] &lt; title &gt;</p>\n<p>模版<br>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #将.deploy目录部署到GitHub</p>\n<p>hexo new [layout] &lt; title &gt;<br>hexo new photo “My Gallery”<br>hexo new “Hello World” –lang tw</p>\n<p>变量  描述<br>layout  布局<br>title   标题<br>date    文件建立日期<br>title: 使用Hexo搭建个人博客<br>layout: post<br>date: 2014-03-03 19:07:43<br>comments: true<br>categories: Blog<br>tags: [Hexo]<br>keywords: Hexo, Blog<br>description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。<br>模版（Scaffold）<br>hexo new photo “My Gallery”</p>\n<p>变量  描述<br>layout  布局<br>title   标题<br>date    文件建立日期<br>设置文章摘要<br>以上是文章摘要 &lt;! – more – &gt; 以下是余下全文<br>写作<br>hexo new page &lt; title&gt;<br>hexo new post &lt; title&gt;</p>\n<p>变量  描述<br>:title  标题<br>:year   建立的年份（4 位数）<br>:month  建立的月份（2 位数）<br>:i_month    建立的月份（去掉开头的零）<br>:day    建立的日期（2 位数）<br>:i_day  建立的日期（去掉开头的零）<br>推送到服务器上<br>hexo n #写文章<br>hexo g #生成<br>hexo d #部署 #可与hexo g合并为 hexo d -g</p>\n","excerpt":"<p>hexo<br>npm install hexo -g #安装<br>npm update hexo -g #升级<br>hexo init #初始化<br>","more":"<br>简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo p == hexo publish<br>hexo g == hexo generate#生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy#部署</p>\n<p>服务器<br>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP</p>\n<p>hexo clean #清除缓存 网页正常情况下可以忽略此条命令<br>hexo g #生成静态网页<br>hexo d #开始部署</p>\n<p>监视文件变动<br>hexo generate #使用 Hexo 生成静态文件快速而且简单<br>hexo generate –watch #监视文件变动</p>\n<p>完成后部署<br>两个命令的作用是相同的<br>hexo generate –deploy<br>hexo deploy –generate<br>hexo deploy -g<br>hexo server -g</p>\n<p>草稿<br>hexo publish [layout] &lt; title &gt;</p>\n<p>模版<br>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #将.deploy目录部署到GitHub</p>\n<p>hexo new [layout] &lt; title &gt;<br>hexo new photo “My Gallery”<br>hexo new “Hello World” –lang tw</p>\n<p>变量  描述<br>layout  布局<br>title   标题<br>date    文件建立日期<br>title: 使用Hexo搭建个人博客<br>layout: post<br>date: 2014-03-03 19:07:43<br>comments: true<br>categories: Blog<br>tags: [Hexo]<br>keywords: Hexo, Blog<br>description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。<br>模版（Scaffold）<br>hexo new photo “My Gallery”</p>\n<p>变量  描述<br>layout  布局<br>title   标题<br>date    文件建立日期<br>设置文章摘要<br>以上是文章摘要 &lt;! – more – &gt; 以下是余下全文<br>写作<br>hexo new page &lt; title&gt;<br>hexo new post &lt; title&gt;</p>\n<p>变量  描述<br>:title  标题<br>:year   建立的年份（4 位数）<br>:month  建立的月份（2 位数）<br>:i_month    建立的月份（去掉开头的零）<br>:day    建立的日期（2 位数）<br>:i_day  建立的日期（去掉开头的零）<br>推送到服务器上<br>hexo n #写文章<br>hexo g #生成<br>hexo d #部署 #可与hexo g合并为 hexo d -g</p>"},{"title":"hexo常用命令笔记","date":"2016-11-21T19:24:29.000Z","_content":"hexo\nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化\n<!--more-->\n简写\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n\n服务器\nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\n\n监视文件变动\nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n\n完成后部署\n两个命令的作用是相同的\nhexo generate --deploy\nhexo deploy --generate\nhexo deploy -g\nhexo server -g\n\n草稿\nhexo publish [layout] < title >\n\n模版\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] < title >\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n\n变量  描述\nlayout  布局\ntitle   标题\ndate    文件建立日期\ntitle: 使用Hexo搭建个人博客\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n模版（Scaffold）\nhexo new photo \"My Gallery\"\n\n变量  描述\nlayout  布局\ntitle   标题\ndate    文件建立日期\n设置文章摘要\n以上是文章摘要 <! -- more -- > 以下是余下全文 \n写作\nhexo new page < title>\nhexo new post < title>\n\n变量  描述\n:title  标题\n:year   建立的年份（4 位数）\n:month  建立的月份（2 位数）\n:i_month    建立的月份（去掉开头的零）\n:day    建立的日期（2 位数）\n:i_day  建立的日期（去掉开头的零）\n推送到服务器上\nhexo n #写文章\nhexo g #生成\nhexo d #部署 #可与hexo g合并为 hexo d -g","source":"_posts/hexo??????.md","raw":"---\ntitle: hexo常用命令笔记\ndate: 2016-11-21 14:24:29\ntags: hexo\n---\nhexo\nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化\n<!--more-->\n简写\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n\n服务器\nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\n\n监视文件变动\nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n\n完成后部署\n两个命令的作用是相同的\nhexo generate --deploy\nhexo deploy --generate\nhexo deploy -g\nhexo server -g\n\n草稿\nhexo publish [layout] < title >\n\n模版\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] < title >\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n\n变量  描述\nlayout  布局\ntitle   标题\ndate    文件建立日期\ntitle: 使用Hexo搭建个人博客\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n模版（Scaffold）\nhexo new photo \"My Gallery\"\n\n变量  描述\nlayout  布局\ntitle   标题\ndate    文件建立日期\n设置文章摘要\n以上是文章摘要 <! -- more -- > 以下是余下全文 \n写作\nhexo new page < title>\nhexo new post < title>\n\n变量  描述\n:title  标题\n:year   建立的年份（4 位数）\n:month  建立的月份（2 位数）\n:i_month    建立的月份（去掉开头的零）\n:day    建立的日期（2 位数）\n:i_day  建立的日期（去掉开头的零）\n推送到服务器上\nhexo n #写文章\nhexo g #生成\nhexo d #部署 #可与hexo g合并为 hexo d -g","slug":"hexo??????","published":1,"updated":"2016-11-21T06:58:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civuk3otd0008lepvvga3tzzl","content":"<p>hexo<br>npm install hexo -g #安装<br>npm update hexo -g #升级<br>hexo init #初始化<br><a id=\"more\"></a><br>简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo p == hexo publish<br>hexo g == hexo generate#生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy#部署</p>\n<p>服务器<br>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP</p>\n<p>hexo clean #清除缓存 网页正常情况下可以忽略此条命令<br>hexo g #生成静态网页<br>hexo d #开始部署</p>\n<p>监视文件变动<br>hexo generate #使用 Hexo 生成静态文件快速而且简单<br>hexo generate –watch #监视文件变动</p>\n<p>完成后部署<br>两个命令的作用是相同的<br>hexo generate –deploy<br>hexo deploy –generate<br>hexo deploy -g<br>hexo server -g</p>\n<p>草稿<br>hexo publish [layout] &lt; title &gt;</p>\n<p>模版<br>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #将.deploy目录部署到GitHub</p>\n<p>hexo new [layout] &lt; title &gt;<br>hexo new photo “My Gallery”<br>hexo new “Hello World” –lang tw</p>\n<p>变量  描述<br>layout  布局<br>title   标题<br>date    文件建立日期<br>title: 使用Hexo搭建个人博客<br>layout: post<br>date: 2014-03-03 19:07:43<br>comments: true<br>categories: Blog<br>tags: [Hexo]<br>keywords: Hexo, Blog<br>description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。<br>模版（Scaffold）<br>hexo new photo “My Gallery”</p>\n<p>变量  描述<br>layout  布局<br>title   标题<br>date    文件建立日期<br>设置文章摘要<br>以上是文章摘要 &lt;! – more – &gt; 以下是余下全文<br>写作<br>hexo new page &lt; title&gt;<br>hexo new post &lt; title&gt;</p>\n<p>变量  描述<br>:title  标题<br>:year   建立的年份（4 位数）<br>:month  建立的月份（2 位数）<br>:i_month    建立的月份（去掉开头的零）<br>:day    建立的日期（2 位数）<br>:i_day  建立的日期（去掉开头的零）<br>推送到服务器上<br>hexo n #写文章<br>hexo g #生成<br>hexo d #部署 #可与hexo g合并为 hexo d -g</p>\n","excerpt":"<p>hexo<br>npm install hexo -g #安装<br>npm update hexo -g #升级<br>hexo init #初始化<br>","more":"<br>简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo p == hexo publish<br>hexo g == hexo generate#生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy#部署</p>\n<p>服务器<br>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP</p>\n<p>hexo clean #清除缓存 网页正常情况下可以忽略此条命令<br>hexo g #生成静态网页<br>hexo d #开始部署</p>\n<p>监视文件变动<br>hexo generate #使用 Hexo 生成静态文件快速而且简单<br>hexo generate –watch #监视文件变动</p>\n<p>完成后部署<br>两个命令的作用是相同的<br>hexo generate –deploy<br>hexo deploy –generate<br>hexo deploy -g<br>hexo server -g</p>\n<p>草稿<br>hexo publish [layout] &lt; title &gt;</p>\n<p>模版<br>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #将.deploy目录部署到GitHub</p>\n<p>hexo new [layout] &lt; title &gt;<br>hexo new photo “My Gallery”<br>hexo new “Hello World” –lang tw</p>\n<p>变量  描述<br>layout  布局<br>title   标题<br>date    文件建立日期<br>title: 使用Hexo搭建个人博客<br>layout: post<br>date: 2014-03-03 19:07:43<br>comments: true<br>categories: Blog<br>tags: [Hexo]<br>keywords: Hexo, Blog<br>description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。<br>模版（Scaffold）<br>hexo new photo “My Gallery”</p>\n<p>变量  描述<br>layout  布局<br>title   标题<br>date    文件建立日期<br>设置文章摘要<br>以上是文章摘要 &lt;! – more – &gt; 以下是余下全文<br>写作<br>hexo new page &lt; title&gt;<br>hexo new post &lt; title&gt;</p>\n<p>变量  描述<br>:title  标题<br>:year   建立的年份（4 位数）<br>:month  建立的月份（2 位数）<br>:i_month    建立的月份（去掉开头的零）<br>:day    建立的日期（2 位数）<br>:i_day  建立的日期（去掉开头的零）<br>推送到服务器上<br>hexo n #写文章<br>hexo g #生成<br>hexo d #部署 #可与hexo g合并为 hexo d -g</p>"},{"title":"html","date":"2016-11-21T20:47:23.000Z","_content":"","source":"_posts/html.md","raw":"---\ntitle: html\ndate: 2016-11-21 15:47:23\ntags:\n---\n","slug":"html","published":1,"updated":"2016-11-21T07:47:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civuk3otf000blepvxjjuy19s","content":"","excerpt":"","more":""},{"title":"Node服务器端开发第一天","date":"2016-11-22T02:39:52.000Z","type":"tags","_content":"# Node服务器端开发第一天\n\n> Node简介及配置、快速上手、核心特点、模块化\n![1212.png](http://upload-images.jianshu.io/upload_images/2353966-cb17eb530c7999fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<!--more-->\n## Node简介\n\n### 客户端的JavaScript是怎样的\n\n- 什么是 JavaScript？\n  + 脚本语言\n  + 运行在浏览器中\n  + 一般用来做客户端页面的交互（Interactive）\n\n- JavaScript 的运行环境？\n  + 是不是运行在浏览器呢？\n  + 不够严谨\n  + 运行在浏览器内核中的 JS 引擎（engine）\n\n- 浏览器中的 JavaScript 可以做什么？\n  + 操作DOM（对DOM的增删改、注册事件）\n  + AJAX/跨域\n  + BOM（页面跳转、历史记录、console.log()、alert()）\n  + ECMAScript\n\n- 浏览器中的 JavaScript 不可以做什么？\n  + 文件操作（文件和文件夹的CRUD）\n  + 没有办法操作系统信息\n  + 由于运行环境特殊（我们写的代码是在不认识的人的浏览器中运行）\n\n- 在开发人员能力相同的情况下编程语言的能力取决于什么？\n  + -语言本身？-\n  + 语言本身只是提供定义变量，定义函数，定义类型，流程控制，循环结构之类的操作\n  + 取决于运行该语言的平台（环境）\n  + 对于JS来说，我们常说的JS实际是ES，大部分能力都是由浏览器的执行引擎决定\n  + BOM和DOM可以说是浏览器开放出来的接口\n  + 比如：Cordova中提供JS调用摄像头，操作本地文件的API\n\n  + Java既是语言也是平台\n  + Java运行在Java虚拟机（跨操作系统）\n  + PHP既是语言也是平台（跨操作系统）\n\n  + C#语言平台：.NET Framework（Windows）\n  + C#可以运行在MONO这样的平台\n  + 因为有人需要将C#运行在Linux平台，所有出现了MONO\n\n\n- JavaScript 只可以运行在浏览器中吗？\n  + 不是\n  + 能运行在哪取决于，这个环境有没有特定平台\n\n\n### 什么是Node\n\n- Node 就是 JavaScript 语言在服务器端的运行环境\n- 所谓“运行环境（平台）”有两层意思：\n  + 首先，JavaScript 语言通过 Node 在服务器运行，在这个意义上，Node 有点像 JavaScript 虚拟机；\n  + 其次，Node 提供大量工具库，使得 JavaScript 语言与操作系统互动（比如读写文件、新建子进程），在这个意义上， Node 又是 JavaScript 的工具库。\n\n\n\n### 为什么是JavaScript\n\n\n\n\n### Node的实现结构\n\n\n\n\n### Node在当下Web开发领域的应用\n\n\n\n\n### 哪些公司在用\n\n\n\n\n### 重点理解\n\n- Node是一个JavaScript的运行环境（平台），不是一门语言，也不是JavaScript的框架；\n- Node的实现结构；\n- Node可以用来开发服务端应用程序，Web系统；\n- 基于Node的前端工具集\n\n\n\n\n\n*****\n\n## 环境配置\n\n### 安装包的方式安装\n\n- 安装包下载链接：\n  + Mac OSX： [darwin](http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0.pkg)\n  + Windows：\n    * [x64](http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0-x64.msi)\n    * [x86](http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0-x86.msi)\n- 安装操作：\n  + 一路*Next*\n\n\n### 更新版本\n\n- 操作方式：\n  + 重新下载最新的安装包；\n  + 覆盖安装即可；\n- 问题：\n  + 以前版本安装的很多全局的工具包需要重新安装\n  + 无法回滚到之前的版本\n  + 无法在多个版本之间切换（很多时候我们要使用特定版本）\n\n\n\n### NVM工具的使用\n\n> Node Version Manager（Node版本管理工具）\n\n由于以后的开发工作可能会在多个Node版本中测试，而且Node的版本也比较多，所以需要这么款工具来管理\n\n\n#### 安装操作步骤\n\n1. 下载：[nvm-windows](https://github.com/coreybutler/nvm-windows/releases/download/1.1.0/nvm-noinstall.zip)\n2. 解压到一个全英文路径\n3. 编辑解压目录下的`settings.txt`文件（不存在则新建）\n\n  + `root 配置为当前 nvm.exe 所在目录`\n  + `path 配置为 node 快捷方式所在的目录`\n  + `arch 配置为当前操作系统的位数（32/64）`\n  + `proxy 不用配置`\n\n4. 配置环境变量 可以通过 window+r  : sysdm.cpl\n\n  + `NVM_HOME = 当前 nvm.exe 所在目录`\n  + `NVM_SYMLINK = node 快捷方式所在的目录`\n  + `PATH += %NVM_HOME%;%NVM_SYMLINK%;`\n  + 打开CMD通过`set [name]`命令查看环境变量是否配置成功\n  + PowerShell中是通过`dir env:[name]`命令\n\n5. NVM使用说明：\n\n  + https://github.com/coreybutler/nvm-windows/\n\n6. NPM的目录之后使用再配置\n\n\n### 配置Python环境\n\n> Node中有些第三方的包是以C/C++源码的方式发布的，需要安装后编译\n> 确保全局环境中可以使用python命令\n\n\n\n\n### 环境变量的概念\n\n> 环境变量就是操作系统提供的系统级别用于存储变量的地方\n\n- Windows中环境变量分为系统变量和用户变量\n- 环境变量的变量名是不区分大小写的\n- 特殊值：\n  + PATH 变量：只要添加到 PATH 变量中的路径，都可以在任何目录下搜索\n\n\n\n### Windows下常用的命令行操作\n\n- 切换当前目录（change directory）：cd\n- 创建目录（make directory）：mkdir\n- 查看当前目录列表（directory）：dir\n  + 别名：ls（list）\n- 清空当前控制台：cls\n  + 别名：clear\n- 删除文件：del\n  + 别名：rm\n\n> 注意：所有别名必须在新版本的 PowerShell 中使用\n\n\n\n*****\n\n## 快速上手\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*****\n\n## 事件驱动和非阻塞\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*****\n\n## 模块化开发\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/node-1-day.md","raw":"---\ntitle: Node服务器端开发第一天\ndate: 2016-11-21 21:39:52\ntype: \"tags\"\ntags:\n  - node\n  - Another Tag\n---\n# Node服务器端开发第一天\n\n> Node简介及配置、快速上手、核心特点、模块化\n![1212.png](http://upload-images.jianshu.io/upload_images/2353966-cb17eb530c7999fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<!--more-->\n## Node简介\n\n### 客户端的JavaScript是怎样的\n\n- 什么是 JavaScript？\n  + 脚本语言\n  + 运行在浏览器中\n  + 一般用来做客户端页面的交互（Interactive）\n\n- JavaScript 的运行环境？\n  + 是不是运行在浏览器呢？\n  + 不够严谨\n  + 运行在浏览器内核中的 JS 引擎（engine）\n\n- 浏览器中的 JavaScript 可以做什么？\n  + 操作DOM（对DOM的增删改、注册事件）\n  + AJAX/跨域\n  + BOM（页面跳转、历史记录、console.log()、alert()）\n  + ECMAScript\n\n- 浏览器中的 JavaScript 不可以做什么？\n  + 文件操作（文件和文件夹的CRUD）\n  + 没有办法操作系统信息\n  + 由于运行环境特殊（我们写的代码是在不认识的人的浏览器中运行）\n\n- 在开发人员能力相同的情况下编程语言的能力取决于什么？\n  + -语言本身？-\n  + 语言本身只是提供定义变量，定义函数，定义类型，流程控制，循环结构之类的操作\n  + 取决于运行该语言的平台（环境）\n  + 对于JS来说，我们常说的JS实际是ES，大部分能力都是由浏览器的执行引擎决定\n  + BOM和DOM可以说是浏览器开放出来的接口\n  + 比如：Cordova中提供JS调用摄像头，操作本地文件的API\n\n  + Java既是语言也是平台\n  + Java运行在Java虚拟机（跨操作系统）\n  + PHP既是语言也是平台（跨操作系统）\n\n  + C#语言平台：.NET Framework（Windows）\n  + C#可以运行在MONO这样的平台\n  + 因为有人需要将C#运行在Linux平台，所有出现了MONO\n\n\n- JavaScript 只可以运行在浏览器中吗？\n  + 不是\n  + 能运行在哪取决于，这个环境有没有特定平台\n\n\n### 什么是Node\n\n- Node 就是 JavaScript 语言在服务器端的运行环境\n- 所谓“运行环境（平台）”有两层意思：\n  + 首先，JavaScript 语言通过 Node 在服务器运行，在这个意义上，Node 有点像 JavaScript 虚拟机；\n  + 其次，Node 提供大量工具库，使得 JavaScript 语言与操作系统互动（比如读写文件、新建子进程），在这个意义上， Node 又是 JavaScript 的工具库。\n\n\n\n### 为什么是JavaScript\n\n\n\n\n### Node的实现结构\n\n\n\n\n### Node在当下Web开发领域的应用\n\n\n\n\n### 哪些公司在用\n\n\n\n\n### 重点理解\n\n- Node是一个JavaScript的运行环境（平台），不是一门语言，也不是JavaScript的框架；\n- Node的实现结构；\n- Node可以用来开发服务端应用程序，Web系统；\n- 基于Node的前端工具集\n\n\n\n\n\n*****\n\n## 环境配置\n\n### 安装包的方式安装\n\n- 安装包下载链接：\n  + Mac OSX： [darwin](http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0.pkg)\n  + Windows：\n    * [x64](http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0-x64.msi)\n    * [x86](http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0-x86.msi)\n- 安装操作：\n  + 一路*Next*\n\n\n### 更新版本\n\n- 操作方式：\n  + 重新下载最新的安装包；\n  + 覆盖安装即可；\n- 问题：\n  + 以前版本安装的很多全局的工具包需要重新安装\n  + 无法回滚到之前的版本\n  + 无法在多个版本之间切换（很多时候我们要使用特定版本）\n\n\n\n### NVM工具的使用\n\n> Node Version Manager（Node版本管理工具）\n\n由于以后的开发工作可能会在多个Node版本中测试，而且Node的版本也比较多，所以需要这么款工具来管理\n\n\n#### 安装操作步骤\n\n1. 下载：[nvm-windows](https://github.com/coreybutler/nvm-windows/releases/download/1.1.0/nvm-noinstall.zip)\n2. 解压到一个全英文路径\n3. 编辑解压目录下的`settings.txt`文件（不存在则新建）\n\n  + `root 配置为当前 nvm.exe 所在目录`\n  + `path 配置为 node 快捷方式所在的目录`\n  + `arch 配置为当前操作系统的位数（32/64）`\n  + `proxy 不用配置`\n\n4. 配置环境变量 可以通过 window+r  : sysdm.cpl\n\n  + `NVM_HOME = 当前 nvm.exe 所在目录`\n  + `NVM_SYMLINK = node 快捷方式所在的目录`\n  + `PATH += %NVM_HOME%;%NVM_SYMLINK%;`\n  + 打开CMD通过`set [name]`命令查看环境变量是否配置成功\n  + PowerShell中是通过`dir env:[name]`命令\n\n5. NVM使用说明：\n\n  + https://github.com/coreybutler/nvm-windows/\n\n6. NPM的目录之后使用再配置\n\n\n### 配置Python环境\n\n> Node中有些第三方的包是以C/C++源码的方式发布的，需要安装后编译\n> 确保全局环境中可以使用python命令\n\n\n\n\n### 环境变量的概念\n\n> 环境变量就是操作系统提供的系统级别用于存储变量的地方\n\n- Windows中环境变量分为系统变量和用户变量\n- 环境变量的变量名是不区分大小写的\n- 特殊值：\n  + PATH 变量：只要添加到 PATH 变量中的路径，都可以在任何目录下搜索\n\n\n\n### Windows下常用的命令行操作\n\n- 切换当前目录（change directory）：cd\n- 创建目录（make directory）：mkdir\n- 查看当前目录列表（directory）：dir\n  + 别名：ls（list）\n- 清空当前控制台：cls\n  + 别名：clear\n- 删除文件：del\n  + 别名：rm\n\n> 注意：所有别名必须在新版本的 PowerShell 中使用\n\n\n\n*****\n\n## 快速上手\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*****\n\n## 事件驱动和非阻塞\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*****\n\n## 模块化开发\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"node-1-day","published":1,"updated":"2016-11-23T05:01:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civuk3otl000clepvhcdvbt5u","content":"<h1 id=\"Node服务器端开发第一天\"><a href=\"#Node服务器端开发第一天\" class=\"headerlink\" title=\"Node服务器端开发第一天\"></a>Node服务器端开发第一天</h1><blockquote>\n<p>Node简介及配置、快速上手、核心特点、模块化<br><img src=\"http://upload-images.jianshu.io/upload_images/2353966-cb17eb530c7999fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1212.png\"><br><a id=\"more\"></a></p>\n<h2 id=\"Node简介\"><a href=\"#Node简介\" class=\"headerlink\" title=\"Node简介\"></a>Node简介</h2></blockquote>\n<h3 id=\"客户端的JavaScript是怎样的\"><a href=\"#客户端的JavaScript是怎样的\" class=\"headerlink\" title=\"客户端的JavaScript是怎样的\"></a>客户端的JavaScript是怎样的</h3><ul>\n<li><p>什么是 JavaScript？</p>\n<ul>\n<li>脚本语言</li>\n<li>运行在浏览器中</li>\n<li>一般用来做客户端页面的交互（Interactive）</li>\n</ul>\n</li>\n<li><p>JavaScript 的运行环境？</p>\n<ul>\n<li>是不是运行在浏览器呢？</li>\n<li>不够严谨</li>\n<li>运行在浏览器内核中的 JS 引擎（engine）</li>\n</ul>\n</li>\n<li><p>浏览器中的 JavaScript 可以做什么？</p>\n<ul>\n<li>操作DOM（对DOM的增删改、注册事件）</li>\n<li>AJAX/跨域</li>\n<li>BOM（页面跳转、历史记录、console.log()、alert()）</li>\n<li>ECMAScript</li>\n</ul>\n</li>\n<li><p>浏览器中的 JavaScript 不可以做什么？</p>\n<ul>\n<li>文件操作（文件和文件夹的CRUD）</li>\n<li>没有办法操作系统信息</li>\n<li>由于运行环境特殊（我们写的代码是在不认识的人的浏览器中运行）</li>\n</ul>\n</li>\n<li><p>在开发人员能力相同的情况下编程语言的能力取决于什么？</p>\n<ul>\n<li>-语言本身？-</li>\n<li>语言本身只是提供定义变量，定义函数，定义类型，流程控制，循环结构之类的操作</li>\n<li>取决于运行该语言的平台（环境）</li>\n<li>对于JS来说，我们常说的JS实际是ES，大部分能力都是由浏览器的执行引擎决定</li>\n<li>BOM和DOM可以说是浏览器开放出来的接口</li>\n<li><p>比如：Cordova中提供JS调用摄像头，操作本地文件的API</p>\n</li>\n<li><p>Java既是语言也是平台</p>\n</li>\n<li>Java运行在Java虚拟机（跨操作系统）</li>\n<li><p>PHP既是语言也是平台（跨操作系统）</p>\n</li>\n<li><p>C#语言平台：.NET Framework（Windows）</p>\n</li>\n<li>C#可以运行在MONO这样的平台</li>\n<li>因为有人需要将C#运行在Linux平台，所有出现了MONO</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>JavaScript 只可以运行在浏览器中吗？<ul>\n<li>不是</li>\n<li>能运行在哪取决于，这个环境有没有特定平台</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"什么是Node\"><a href=\"#什么是Node\" class=\"headerlink\" title=\"什么是Node\"></a>什么是Node</h3><ul>\n<li>Node 就是 JavaScript 语言在服务器端的运行环境</li>\n<li>所谓“运行环境（平台）”有两层意思：<ul>\n<li>首先，JavaScript 语言通过 Node 在服务器运行，在这个意义上，Node 有点像 JavaScript 虚拟机；</li>\n<li>其次，Node 提供大量工具库，使得 JavaScript 语言与操作系统互动（比如读写文件、新建子进程），在这个意义上， Node 又是 JavaScript 的工具库。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"为什么是JavaScript\"><a href=\"#为什么是JavaScript\" class=\"headerlink\" title=\"为什么是JavaScript\"></a>为什么是JavaScript</h3><h3 id=\"Node的实现结构\"><a href=\"#Node的实现结构\" class=\"headerlink\" title=\"Node的实现结构\"></a>Node的实现结构</h3><h3 id=\"Node在当下Web开发领域的应用\"><a href=\"#Node在当下Web开发领域的应用\" class=\"headerlink\" title=\"Node在当下Web开发领域的应用\"></a>Node在当下Web开发领域的应用</h3><h3 id=\"哪些公司在用\"><a href=\"#哪些公司在用\" class=\"headerlink\" title=\"哪些公司在用\"></a>哪些公司在用</h3><h3 id=\"重点理解\"><a href=\"#重点理解\" class=\"headerlink\" title=\"重点理解\"></a>重点理解</h3><ul>\n<li>Node是一个JavaScript的运行环境（平台），不是一门语言，也不是JavaScript的框架；</li>\n<li>Node的实现结构；</li>\n<li>Node可以用来开发服务端应用程序，Web系统；</li>\n<li>基于Node的前端工具集</li>\n</ul>\n<hr>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><h3 id=\"安装包的方式安装\"><a href=\"#安装包的方式安装\" class=\"headerlink\" title=\"安装包的方式安装\"></a>安装包的方式安装</h3><ul>\n<li>安装包下载链接：<ul>\n<li>Mac OSX： <a href=\"http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0.pkg\" target=\"_blank\" rel=\"external\">darwin</a></li>\n<li>Windows：<ul>\n<li><a href=\"http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0-x64.msi\" target=\"_blank\" rel=\"external\">x64</a></li>\n<li><a href=\"http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0-x86.msi\" target=\"_blank\" rel=\"external\">x86</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>安装操作：<ul>\n<li>一路<em>Next</em></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"更新版本\"><a href=\"#更新版本\" class=\"headerlink\" title=\"更新版本\"></a>更新版本</h3><ul>\n<li>操作方式：<ul>\n<li>重新下载最新的安装包；</li>\n<li>覆盖安装即可；</li>\n</ul>\n</li>\n<li>问题：<ul>\n<li>以前版本安装的很多全局的工具包需要重新安装</li>\n<li>无法回滚到之前的版本</li>\n<li>无法在多个版本之间切换（很多时候我们要使用特定版本）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"NVM工具的使用\"><a href=\"#NVM工具的使用\" class=\"headerlink\" title=\"NVM工具的使用\"></a>NVM工具的使用</h3><blockquote>\n<p>Node Version Manager（Node版本管理工具）</p>\n</blockquote>\n<p>由于以后的开发工作可能会在多个Node版本中测试，而且Node的版本也比较多，所以需要这么款工具来管理</p>\n<h4 id=\"安装操作步骤\"><a href=\"#安装操作步骤\" class=\"headerlink\" title=\"安装操作步骤\"></a>安装操作步骤</h4><ol>\n<li>下载：<a href=\"https://github.com/coreybutler/nvm-windows/releases/download/1.1.0/nvm-noinstall.zip\" target=\"_blank\" rel=\"external\">nvm-windows</a></li>\n<li>解压到一个全英文路径</li>\n<li><p>编辑解压目录下的<code>settings.txt</code>文件（不存在则新建）</p>\n<ul>\n<li><code>root 配置为当前 nvm.exe 所在目录</code></li>\n<li><code>path 配置为 node 快捷方式所在的目录</code></li>\n<li><code>arch 配置为当前操作系统的位数（32/64）</code></li>\n<li><code>proxy 不用配置</code></li>\n</ul>\n</li>\n<li><p>配置环境变量 可以通过 window+r  : sysdm.cpl</p>\n<ul>\n<li><code>NVM_HOME = 当前 nvm.exe 所在目录</code></li>\n<li><code>NVM_SYMLINK = node 快捷方式所在的目录</code></li>\n<li><code>PATH += %NVM_HOME%;%NVM_SYMLINK%;</code></li>\n<li>打开CMD通过<code>set [name]</code>命令查看环境变量是否配置成功</li>\n<li>PowerShell中是通过<code>dir env:[name]</code>命令</li>\n</ul>\n</li>\n<li><p>NVM使用说明：</p>\n<ul>\n<li><a href=\"https://github.com/coreybutler/nvm-windows/\" target=\"_blank\" rel=\"external\">https://github.com/coreybutler/nvm-windows/</a></li>\n</ul>\n</li>\n<li><p>NPM的目录之后使用再配置</p>\n</li>\n</ol>\n<h3 id=\"配置Python环境\"><a href=\"#配置Python环境\" class=\"headerlink\" title=\"配置Python环境\"></a>配置Python环境</h3><blockquote>\n<p>Node中有些第三方的包是以C/C++源码的方式发布的，需要安装后编译<br>确保全局环境中可以使用python命令</p>\n</blockquote>\n<h3 id=\"环境变量的概念\"><a href=\"#环境变量的概念\" class=\"headerlink\" title=\"环境变量的概念\"></a>环境变量的概念</h3><blockquote>\n<p>环境变量就是操作系统提供的系统级别用于存储变量的地方</p>\n</blockquote>\n<ul>\n<li>Windows中环境变量分为系统变量和用户变量</li>\n<li>环境变量的变量名是不区分大小写的</li>\n<li>特殊值：<ul>\n<li>PATH 变量：只要添加到 PATH 变量中的路径，都可以在任何目录下搜索</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Windows下常用的命令行操作\"><a href=\"#Windows下常用的命令行操作\" class=\"headerlink\" title=\"Windows下常用的命令行操作\"></a>Windows下常用的命令行操作</h3><ul>\n<li>切换当前目录（change directory）：cd</li>\n<li>创建目录（make directory）：mkdir</li>\n<li>查看当前目录列表（directory）：dir<ul>\n<li>别名：ls（list）</li>\n</ul>\n</li>\n<li>清空当前控制台：cls<ul>\n<li>别名：clear</li>\n</ul>\n</li>\n<li>删除文件：del<ul>\n<li>别名：rm</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意：所有别名必须在新版本的 PowerShell 中使用</p>\n</blockquote>\n<hr>\n<h2 id=\"快速上手\"><a href=\"#快速上手\" class=\"headerlink\" title=\"快速上手\"></a>快速上手</h2><hr>\n<h2 id=\"事件驱动和非阻塞\"><a href=\"#事件驱动和非阻塞\" class=\"headerlink\" title=\"事件驱动和非阻塞\"></a>事件驱动和非阻塞</h2><hr>\n<h2 id=\"模块化开发\"><a href=\"#模块化开发\" class=\"headerlink\" title=\"模块化开发\"></a>模块化开发</h2>","excerpt":"<h1 id=\"Node服务器端开发第一天\"><a href=\"#Node服务器端开发第一天\" class=\"headerlink\" title=\"Node服务器端开发第一天\"></a>Node服务器端开发第一天</h1><blockquote>\n<p>Node简介及配置、快速上手、核心特点、模块化<br><img src=\"http://upload-images.jianshu.io/upload_images/2353966-cb17eb530c7999fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1212.png\"><br>","more":"</p>\n<h2 id=\"Node简介\"><a href=\"#Node简介\" class=\"headerlink\" title=\"Node简介\"></a>Node简介</h2></blockquote>\n<h3 id=\"客户端的JavaScript是怎样的\"><a href=\"#客户端的JavaScript是怎样的\" class=\"headerlink\" title=\"客户端的JavaScript是怎样的\"></a>客户端的JavaScript是怎样的</h3><ul>\n<li><p>什么是 JavaScript？</p>\n<ul>\n<li>脚本语言</li>\n<li>运行在浏览器中</li>\n<li>一般用来做客户端页面的交互（Interactive）</li>\n</ul>\n</li>\n<li><p>JavaScript 的运行环境？</p>\n<ul>\n<li>是不是运行在浏览器呢？</li>\n<li>不够严谨</li>\n<li>运行在浏览器内核中的 JS 引擎（engine）</li>\n</ul>\n</li>\n<li><p>浏览器中的 JavaScript 可以做什么？</p>\n<ul>\n<li>操作DOM（对DOM的增删改、注册事件）</li>\n<li>AJAX/跨域</li>\n<li>BOM（页面跳转、历史记录、console.log()、alert()）</li>\n<li>ECMAScript</li>\n</ul>\n</li>\n<li><p>浏览器中的 JavaScript 不可以做什么？</p>\n<ul>\n<li>文件操作（文件和文件夹的CRUD）</li>\n<li>没有办法操作系统信息</li>\n<li>由于运行环境特殊（我们写的代码是在不认识的人的浏览器中运行）</li>\n</ul>\n</li>\n<li><p>在开发人员能力相同的情况下编程语言的能力取决于什么？</p>\n<ul>\n<li>-语言本身？-</li>\n<li>语言本身只是提供定义变量，定义函数，定义类型，流程控制，循环结构之类的操作</li>\n<li>取决于运行该语言的平台（环境）</li>\n<li>对于JS来说，我们常说的JS实际是ES，大部分能力都是由浏览器的执行引擎决定</li>\n<li>BOM和DOM可以说是浏览器开放出来的接口</li>\n<li><p>比如：Cordova中提供JS调用摄像头，操作本地文件的API</p>\n</li>\n<li><p>Java既是语言也是平台</p>\n</li>\n<li>Java运行在Java虚拟机（跨操作系统）</li>\n<li><p>PHP既是语言也是平台（跨操作系统）</p>\n</li>\n<li><p>C#语言平台：.NET Framework（Windows）</p>\n</li>\n<li>C#可以运行在MONO这样的平台</li>\n<li>因为有人需要将C#运行在Linux平台，所有出现了MONO</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>JavaScript 只可以运行在浏览器中吗？<ul>\n<li>不是</li>\n<li>能运行在哪取决于，这个环境有没有特定平台</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"什么是Node\"><a href=\"#什么是Node\" class=\"headerlink\" title=\"什么是Node\"></a>什么是Node</h3><ul>\n<li>Node 就是 JavaScript 语言在服务器端的运行环境</li>\n<li>所谓“运行环境（平台）”有两层意思：<ul>\n<li>首先，JavaScript 语言通过 Node 在服务器运行，在这个意义上，Node 有点像 JavaScript 虚拟机；</li>\n<li>其次，Node 提供大量工具库，使得 JavaScript 语言与操作系统互动（比如读写文件、新建子进程），在这个意义上， Node 又是 JavaScript 的工具库。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"为什么是JavaScript\"><a href=\"#为什么是JavaScript\" class=\"headerlink\" title=\"为什么是JavaScript\"></a>为什么是JavaScript</h3><h3 id=\"Node的实现结构\"><a href=\"#Node的实现结构\" class=\"headerlink\" title=\"Node的实现结构\"></a>Node的实现结构</h3><h3 id=\"Node在当下Web开发领域的应用\"><a href=\"#Node在当下Web开发领域的应用\" class=\"headerlink\" title=\"Node在当下Web开发领域的应用\"></a>Node在当下Web开发领域的应用</h3><h3 id=\"哪些公司在用\"><a href=\"#哪些公司在用\" class=\"headerlink\" title=\"哪些公司在用\"></a>哪些公司在用</h3><h3 id=\"重点理解\"><a href=\"#重点理解\" class=\"headerlink\" title=\"重点理解\"></a>重点理解</h3><ul>\n<li>Node是一个JavaScript的运行环境（平台），不是一门语言，也不是JavaScript的框架；</li>\n<li>Node的实现结构；</li>\n<li>Node可以用来开发服务端应用程序，Web系统；</li>\n<li>基于Node的前端工具集</li>\n</ul>\n<hr>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><h3 id=\"安装包的方式安装\"><a href=\"#安装包的方式安装\" class=\"headerlink\" title=\"安装包的方式安装\"></a>安装包的方式安装</h3><ul>\n<li>安装包下载链接：<ul>\n<li>Mac OSX： <a href=\"http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0.pkg\">darwin</a></li>\n<li>Windows：<ul>\n<li><a href=\"http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0-x64.msi\">x64</a></li>\n<li><a href=\"http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0-x86.msi\">x86</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>安装操作：<ul>\n<li>一路<em>Next</em></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"更新版本\"><a href=\"#更新版本\" class=\"headerlink\" title=\"更新版本\"></a>更新版本</h3><ul>\n<li>操作方式：<ul>\n<li>重新下载最新的安装包；</li>\n<li>覆盖安装即可；</li>\n</ul>\n</li>\n<li>问题：<ul>\n<li>以前版本安装的很多全局的工具包需要重新安装</li>\n<li>无法回滚到之前的版本</li>\n<li>无法在多个版本之间切换（很多时候我们要使用特定版本）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"NVM工具的使用\"><a href=\"#NVM工具的使用\" class=\"headerlink\" title=\"NVM工具的使用\"></a>NVM工具的使用</h3><blockquote>\n<p>Node Version Manager（Node版本管理工具）</p>\n</blockquote>\n<p>由于以后的开发工作可能会在多个Node版本中测试，而且Node的版本也比较多，所以需要这么款工具来管理</p>\n<h4 id=\"安装操作步骤\"><a href=\"#安装操作步骤\" class=\"headerlink\" title=\"安装操作步骤\"></a>安装操作步骤</h4><ol>\n<li>下载：<a href=\"https://github.com/coreybutler/nvm-windows/releases/download/1.1.0/nvm-noinstall.zip\">nvm-windows</a></li>\n<li>解压到一个全英文路径</li>\n<li><p>编辑解压目录下的<code>settings.txt</code>文件（不存在则新建）</p>\n<ul>\n<li><code>root 配置为当前 nvm.exe 所在目录</code></li>\n<li><code>path 配置为 node 快捷方式所在的目录</code></li>\n<li><code>arch 配置为当前操作系统的位数（32/64）</code></li>\n<li><code>proxy 不用配置</code></li>\n</ul>\n</li>\n<li><p>配置环境变量 可以通过 window+r  : sysdm.cpl</p>\n<ul>\n<li><code>NVM_HOME = 当前 nvm.exe 所在目录</code></li>\n<li><code>NVM_SYMLINK = node 快捷方式所在的目录</code></li>\n<li><code>PATH += %NVM_HOME%;%NVM_SYMLINK%;</code></li>\n<li>打开CMD通过<code>set [name]</code>命令查看环境变量是否配置成功</li>\n<li>PowerShell中是通过<code>dir env:[name]</code>命令</li>\n</ul>\n</li>\n<li><p>NVM使用说明：</p>\n<ul>\n<li><a href=\"https://github.com/coreybutler/nvm-windows/\">https://github.com/coreybutler/nvm-windows/</a></li>\n</ul>\n</li>\n<li><p>NPM的目录之后使用再配置</p>\n</li>\n</ol>\n<h3 id=\"配置Python环境\"><a href=\"#配置Python环境\" class=\"headerlink\" title=\"配置Python环境\"></a>配置Python环境</h3><blockquote>\n<p>Node中有些第三方的包是以C/C++源码的方式发布的，需要安装后编译<br>确保全局环境中可以使用python命令</p>\n</blockquote>\n<h3 id=\"环境变量的概念\"><a href=\"#环境变量的概念\" class=\"headerlink\" title=\"环境变量的概念\"></a>环境变量的概念</h3><blockquote>\n<p>环境变量就是操作系统提供的系统级别用于存储变量的地方</p>\n</blockquote>\n<ul>\n<li>Windows中环境变量分为系统变量和用户变量</li>\n<li>环境变量的变量名是不区分大小写的</li>\n<li>特殊值：<ul>\n<li>PATH 变量：只要添加到 PATH 变量中的路径，都可以在任何目录下搜索</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Windows下常用的命令行操作\"><a href=\"#Windows下常用的命令行操作\" class=\"headerlink\" title=\"Windows下常用的命令行操作\"></a>Windows下常用的命令行操作</h3><ul>\n<li>切换当前目录（change directory）：cd</li>\n<li>创建目录（make directory）：mkdir</li>\n<li>查看当前目录列表（directory）：dir<ul>\n<li>别名：ls（list）</li>\n</ul>\n</li>\n<li>清空当前控制台：cls<ul>\n<li>别名：clear</li>\n</ul>\n</li>\n<li>删除文件：del<ul>\n<li>别名：rm</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意：所有别名必须在新版本的 PowerShell 中使用</p>\n</blockquote>\n<hr>\n<h2 id=\"快速上手\"><a href=\"#快速上手\" class=\"headerlink\" title=\"快速上手\"></a>快速上手</h2><hr>\n<h2 id=\"事件驱动和非阻塞\"><a href=\"#事件驱动和非阻塞\" class=\"headerlink\" title=\"事件驱动和非阻塞\"></a>事件驱动和非阻塞</h2><hr>\n<h2 id=\"模块化开发\"><a href=\"#模块化开发\" class=\"headerlink\" title=\"模块化开发\"></a>模块化开发</h2>"},{"title":"nodejs 进阶","date":"2016-11-17T03:42:18.000Z","_content":"hexo--搭建\n\n前言\nHexo是一个很好的博客，个人觉得他的界面干净利落，阅读体验也是很好。初次接触Hexo是在朋友的介绍下才知道的，hexo是需要手动搭建（觉得B格很高），在朋友的帮助下也终于是完成了。\n\n开篇记录一下搭建的过程希望能帮助到浏览到这里的朋友\n<!--more-->\n我的系统为OS X，windows也可以参考。\n\n\n简介\n\nHexo是一个开源的静态博客生成器，用node.js开发，作者是台湾大学生tommy351。\n\n思路总结\n\n安装过程中如果出现问题请到最后面查看问题总结，或许能帮助你解决问题。\n\n\n\n环境配置\n\n安装Git\n\n安装过Xcode可以直接跳过这步，因为Xcode自带Git\n\nGit有很多，Mac和Windows都可以直接到git-scm官网下载安装\n\n安装node.js\n\n奉上Macnode-v4.2.2.pkg安装包。\n\n这两个软件的安装步骤就不多做介绍，一直点下一步就好\n\n安装\n\n安装hexo\n\nsudo npminstall-ghexo\n\n初始化\n\n我们可以创建一个新文件夹作为hexo的安装目录，把所有的hexo文件都放里面，主要是为了方便管理。\n\n初始化有两种方式：\n\n直接指定目录\n\nhexo init folderfolder:是指定目录的文件路径。例：/Documents/hexo\n\n进入指定目录(cd /文件夹路径)\n\nhexoinit\n\n终端执行命令后显示的结果：\n\n[info] Copying data[info] You are almost done! Don't forgettorun`npm install`beforestart bloggingwithHexo!\n\n安装依赖包\n\nsudo npminstall\n\n生成静态页面\n\ncd 到你的hexo安装目录（工作目录），执行如下命令\n\nhexogenerate简写 hexog\n\n必须到你新建的hexo安装目录下执行，否则不成功\n\n本地启动测试\n\nhexoserver简写 hexo s\n\n到此本地服务已经完成，可以再浏览器中输入http://localhost:4000进行查看。接下来需要把我们创建的静态页面托管到github上，别人才能访问到\n\n部署到Github\n\n注册Github账号\n\n这里就不再赘述，已有Github账号可以跳过此步骤。\n\n新建repository(仓库)\n\n登陆Github账号后，点击右上角的“+”号按钮，选择“New repository”\n\n\n\n在Create a new repository界面填写格式如下图所示: 用户名.github.io\n\n填写完成点Create repository创建完成\n\n\n\n生成SSH Keys：\n\n我们如何让本地git项目与远程的github建立联系？这时候就要用到SSH Keys\n\n1、生成SSH Keys\n\n使用ssh-keygen命令生成密钥对\n\nssh-keygen -t rsa -C\"这里是你申请Github账号时的邮箱\"\n\n然后系统会要你输入密码：（我们输入的密码会在你提交项目的时候使用）\n\nEnter passphrase (emptyforno passphrase):<输入加密串>Enter same passphrase again:<再次输入加密串>\n\n（终端提示生成的文件路径）找到你生成的密钥找到id_rsa.pub用终端进入编辑，复制密钥。\n\n\n\n2、添加你的SSH Key到ssh-agent\n\n添加你的SSH Key到ssh-agent\n\n//在后台打开 ssh-agenteval\"$(ssh-agent -s)\"添加你的SSH Key到ssh-agentssh-add ~/.ssh/id_rsa\n\n添加SSH Key到Github：\n\n1、添加SSH Key\n\n通过命令复制SSH Key内容到系统剪贴板\n\npbcopy < ~/.ssh/id_rsa.pub\n\n登陆Github,点击右侧用户按钮，选择Settings\n\n\n\n点击 Add SSH key 按钮，将复制的密钥粘贴到 Key 栏\n\n\n\n2、测试能不能链接成功\n\n测试\n\nssh-T git@github.com\n\n执行结果\n\nPermanently addedtheRSA host keyforIP address '192.30.252.130'tothelistofknown hosts.Are you sure you wanttocontinueconnecting (yes/no)?<输入yes>Hi username! You've successfully authenticated,butGitHubdoesnot\n\n现在你已经可以通过SSH链接到Github了\n\n如果有问题，请再配置。参考网站\n\n生成SSH Keys\n\nGenerating SSH Keys\n\nError: Permission denied (publickey)错误\n\nError: Permission denied (publickey)\n\n设置你的用户名和密码：\n\nGit会根据用户的名字和邮箱来记录提交，GitHub也是用这些信息来做权限的处理。\n\ngit config --global user.name\"这里是你申请Github账号时的name\"git config --global user.email\"这里是你申请Github账号时的邮箱\"\n\n部署\n\n编辑 _config.yml(在你的工作目录下)，把下面的your_username换成你的github用户名\n\ndeploy:type: gitrepo:https://github.com/your_username/your_username.github.io.gitbranch: master\n\n执行部署命令\n\nhexod-ghexogenerate和 hexo deploy 合写\n\n问题：\n\n1、 部署时出现：Error: EACCES, open ‘/Users/Desktop/hexo/public/js/script.js’\n\n原因：权限问题在部署命令前加sudo\n\n2、 deployer找不到git: ERROR Deployer not found: git\n\n解决方法:npm install hexo-deployer-git --save\n\n3、\n\n{ [Error:Cannot find module'./build/Release/DTraceProviderBindings']code:'MODULE_NOT_FOUND'}{ [Error:Cannot find module'./build/default/DTraceProviderBindings']code:'MODULE_NOT_FOUND'}{ [Error:Cannot find module'./build/Debug/DTraceProviderBindings']code:'MODULE_NOT_FOUND'}\n\n解决方法：\n\nnpminstall hexo --no-optional\n\n4、npm install卡住不动\n\n使用cnpm加速npm(原文地址：https://cnodejs.org/topic/5338c5db7cbade005b023c98)\n\nnpm--registry=https://registry.npm.taobao.org install koa\n","source":"_posts/nodejs-into.md","raw":"---\ntitle: nodejs 进阶\ndate: 2016-11-16 22:42:18\ntags: nodejs\n---\nhexo--搭建\n\n前言\nHexo是一个很好的博客，个人觉得他的界面干净利落，阅读体验也是很好。初次接触Hexo是在朋友的介绍下才知道的，hexo是需要手动搭建（觉得B格很高），在朋友的帮助下也终于是完成了。\n\n开篇记录一下搭建的过程希望能帮助到浏览到这里的朋友\n<!--more-->\n我的系统为OS X，windows也可以参考。\n\n\n简介\n\nHexo是一个开源的静态博客生成器，用node.js开发，作者是台湾大学生tommy351。\n\n思路总结\n\n安装过程中如果出现问题请到最后面查看问题总结，或许能帮助你解决问题。\n\n\n\n环境配置\n\n安装Git\n\n安装过Xcode可以直接跳过这步，因为Xcode自带Git\n\nGit有很多，Mac和Windows都可以直接到git-scm官网下载安装\n\n安装node.js\n\n奉上Macnode-v4.2.2.pkg安装包。\n\n这两个软件的安装步骤就不多做介绍，一直点下一步就好\n\n安装\n\n安装hexo\n\nsudo npminstall-ghexo\n\n初始化\n\n我们可以创建一个新文件夹作为hexo的安装目录，把所有的hexo文件都放里面，主要是为了方便管理。\n\n初始化有两种方式：\n\n直接指定目录\n\nhexo init folderfolder:是指定目录的文件路径。例：/Documents/hexo\n\n进入指定目录(cd /文件夹路径)\n\nhexoinit\n\n终端执行命令后显示的结果：\n\n[info] Copying data[info] You are almost done! Don't forgettorun`npm install`beforestart bloggingwithHexo!\n\n安装依赖包\n\nsudo npminstall\n\n生成静态页面\n\ncd 到你的hexo安装目录（工作目录），执行如下命令\n\nhexogenerate简写 hexog\n\n必须到你新建的hexo安装目录下执行，否则不成功\n\n本地启动测试\n\nhexoserver简写 hexo s\n\n到此本地服务已经完成，可以再浏览器中输入http://localhost:4000进行查看。接下来需要把我们创建的静态页面托管到github上，别人才能访问到\n\n部署到Github\n\n注册Github账号\n\n这里就不再赘述，已有Github账号可以跳过此步骤。\n\n新建repository(仓库)\n\n登陆Github账号后，点击右上角的“+”号按钮，选择“New repository”\n\n\n\n在Create a new repository界面填写格式如下图所示: 用户名.github.io\n\n填写完成点Create repository创建完成\n\n\n\n生成SSH Keys：\n\n我们如何让本地git项目与远程的github建立联系？这时候就要用到SSH Keys\n\n1、生成SSH Keys\n\n使用ssh-keygen命令生成密钥对\n\nssh-keygen -t rsa -C\"这里是你申请Github账号时的邮箱\"\n\n然后系统会要你输入密码：（我们输入的密码会在你提交项目的时候使用）\n\nEnter passphrase (emptyforno passphrase):<输入加密串>Enter same passphrase again:<再次输入加密串>\n\n（终端提示生成的文件路径）找到你生成的密钥找到id_rsa.pub用终端进入编辑，复制密钥。\n\n\n\n2、添加你的SSH Key到ssh-agent\n\n添加你的SSH Key到ssh-agent\n\n//在后台打开 ssh-agenteval\"$(ssh-agent -s)\"添加你的SSH Key到ssh-agentssh-add ~/.ssh/id_rsa\n\n添加SSH Key到Github：\n\n1、添加SSH Key\n\n通过命令复制SSH Key内容到系统剪贴板\n\npbcopy < ~/.ssh/id_rsa.pub\n\n登陆Github,点击右侧用户按钮，选择Settings\n\n\n\n点击 Add SSH key 按钮，将复制的密钥粘贴到 Key 栏\n\n\n\n2、测试能不能链接成功\n\n测试\n\nssh-T git@github.com\n\n执行结果\n\nPermanently addedtheRSA host keyforIP address '192.30.252.130'tothelistofknown hosts.Are you sure you wanttocontinueconnecting (yes/no)?<输入yes>Hi username! You've successfully authenticated,butGitHubdoesnot\n\n现在你已经可以通过SSH链接到Github了\n\n如果有问题，请再配置。参考网站\n\n生成SSH Keys\n\nGenerating SSH Keys\n\nError: Permission denied (publickey)错误\n\nError: Permission denied (publickey)\n\n设置你的用户名和密码：\n\nGit会根据用户的名字和邮箱来记录提交，GitHub也是用这些信息来做权限的处理。\n\ngit config --global user.name\"这里是你申请Github账号时的name\"git config --global user.email\"这里是你申请Github账号时的邮箱\"\n\n部署\n\n编辑 _config.yml(在你的工作目录下)，把下面的your_username换成你的github用户名\n\ndeploy:type: gitrepo:https://github.com/your_username/your_username.github.io.gitbranch: master\n\n执行部署命令\n\nhexod-ghexogenerate和 hexo deploy 合写\n\n问题：\n\n1、 部署时出现：Error: EACCES, open ‘/Users/Desktop/hexo/public/js/script.js’\n\n原因：权限问题在部署命令前加sudo\n\n2、 deployer找不到git: ERROR Deployer not found: git\n\n解决方法:npm install hexo-deployer-git --save\n\n3、\n\n{ [Error:Cannot find module'./build/Release/DTraceProviderBindings']code:'MODULE_NOT_FOUND'}{ [Error:Cannot find module'./build/default/DTraceProviderBindings']code:'MODULE_NOT_FOUND'}{ [Error:Cannot find module'./build/Debug/DTraceProviderBindings']code:'MODULE_NOT_FOUND'}\n\n解决方法：\n\nnpminstall hexo --no-optional\n\n4、npm install卡住不动\n\n使用cnpm加速npm(原文地址：https://cnodejs.org/topic/5338c5db7cbade005b023c98)\n\nnpm--registry=https://registry.npm.taobao.org install koa\n","slug":"nodejs-into","published":1,"updated":"2016-11-23T05:01:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civuk3otm000elepvwl3s40rw","content":"<p>hexo–搭建</p>\n<p>前言<br>Hexo是一个很好的博客，个人觉得他的界面干净利落，阅读体验也是很好。初次接触Hexo是在朋友的介绍下才知道的，hexo是需要手动搭建（觉得B格很高），在朋友的帮助下也终于是完成了。</p>\n<p>开篇记录一下搭建的过程希望能帮助到浏览到这里的朋友<br><a id=\"more\"></a><br>我的系统为OS X，windows也可以参考。</p>\n<p>简介</p>\n<p>Hexo是一个开源的静态博客生成器，用node.js开发，作者是台湾大学生tommy351。</p>\n<p>思路总结</p>\n<p>安装过程中如果出现问题请到最后面查看问题总结，或许能帮助你解决问题。</p>\n<p>环境配置</p>\n<p>安装Git</p>\n<p>安装过Xcode可以直接跳过这步，因为Xcode自带Git</p>\n<p>Git有很多，Mac和Windows都可以直接到git-scm官网下载安装</p>\n<p>安装node.js</p>\n<p>奉上Macnode-v4.2.2.pkg安装包。</p>\n<p>这两个软件的安装步骤就不多做介绍，一直点下一步就好</p>\n<p>安装</p>\n<p>安装hexo</p>\n<p>sudo npminstall-ghexo</p>\n<p>初始化</p>\n<p>我们可以创建一个新文件夹作为hexo的安装目录，把所有的hexo文件都放里面，主要是为了方便管理。</p>\n<p>初始化有两种方式：</p>\n<p>直接指定目录</p>\n<p>hexo init folderfolder:是指定目录的文件路径。例：/Documents/hexo</p>\n<p>进入指定目录(cd /文件夹路径)</p>\n<p>hexoinit</p>\n<p>终端执行命令后显示的结果：</p>\n<p>[info] Copying data[info] You are almost done! Don’t forgettorun<code>npm install</code>beforestart bloggingwithHexo!</p>\n<p>安装依赖包</p>\n<p>sudo npminstall</p>\n<p>生成静态页面</p>\n<p>cd 到你的hexo安装目录（工作目录），执行如下命令</p>\n<p>hexogenerate简写 hexog</p>\n<p>必须到你新建的hexo安装目录下执行，否则不成功</p>\n<p>本地启动测试</p>\n<p>hexoserver简写 hexo s</p>\n<p>到此本地服务已经完成，可以再浏览器中输入<a href=\"http://localhost:4000进行查看。接下来需要把我们创建的静态页面托管到github上，别人才能访问到\" target=\"_blank\" rel=\"external\">http://localhost:4000进行查看。接下来需要把我们创建的静态页面托管到github上，别人才能访问到</a></p>\n<p>部署到Github</p>\n<p>注册Github账号</p>\n<p>这里就不再赘述，已有Github账号可以跳过此步骤。</p>\n<p>新建repository(仓库)</p>\n<p>登陆Github账号后，点击右上角的“+”号按钮，选择“New repository”</p>\n<p>在Create a new repository界面填写格式如下图所示: 用户名.github.io</p>\n<p>填写完成点Create repository创建完成</p>\n<p>生成SSH Keys：</p>\n<p>我们如何让本地git项目与远程的github建立联系？这时候就要用到SSH Keys</p>\n<p>1、生成SSH Keys</p>\n<p>使用ssh-keygen命令生成密钥对</p>\n<p>ssh-keygen -t rsa -C”这里是你申请Github账号时的邮箱”</p>\n<p>然后系统会要你输入密码：（我们输入的密码会在你提交项目的时候使用）</p>\n<p>Enter passphrase (emptyforno passphrase):&lt;输入加密串&gt;Enter same passphrase again:&lt;再次输入加密串&gt;</p>\n<p>（终端提示生成的文件路径）找到你生成的密钥找到id_rsa.pub用终端进入编辑，复制密钥。</p>\n<p>2、添加你的SSH Key到ssh-agent</p>\n<p>添加你的SSH Key到ssh-agent</p>\n<p>//在后台打开 ssh-agenteval”$(ssh-agent -s)”添加你的SSH Key到ssh-agentssh-add ~/.ssh/id_rsa</p>\n<p>添加SSH Key到Github：</p>\n<p>1、添加SSH Key</p>\n<p>通过命令复制SSH Key内容到系统剪贴板</p>\n<p>pbcopy &lt; ~/.ssh/id_rsa.pub</p>\n<p>登陆Github,点击右侧用户按钮，选择Settings</p>\n<p>点击 Add SSH key 按钮，将复制的密钥粘贴到 Key 栏</p>\n<p>2、测试能不能链接成功</p>\n<p>测试</p>\n<p>ssh-T git@github.com</p>\n<p>执行结果</p>\n<p>Permanently addedtheRSA host keyforIP address ‘192.30.252.130’tothelistofknown hosts.Are you sure you wanttocontinueconnecting (yes/no)?&lt;输入yes&gt;Hi username! You’ve successfully authenticated,butGitHubdoesnot</p>\n<p>现在你已经可以通过SSH链接到Github了</p>\n<p>如果有问题，请再配置。参考网站</p>\n<p>生成SSH Keys</p>\n<p>Generating SSH Keys</p>\n<p>Error: Permission denied (publickey)错误</p>\n<p>Error: Permission denied (publickey)</p>\n<p>设置你的用户名和密码：</p>\n<p>Git会根据用户的名字和邮箱来记录提交，GitHub也是用这些信息来做权限的处理。</p>\n<p>git config –global user.name”这里是你申请Github账号时的name”git config –global user.email”这里是你申请Github账号时的邮箱”</p>\n<p>部署</p>\n<p>编辑 _config.yml(在你的工作目录下)，把下面的your_username换成你的github用户名</p>\n<p>deploy:type: gitrepo:<a href=\"https://github.com/your_username/your_username.github.io.gitbranch\" target=\"_blank\" rel=\"external\">https://github.com/your_username/your_username.github.io.gitbranch</a>: master</p>\n<p>执行部署命令</p>\n<p>hexod-ghexogenerate和 hexo deploy 合写</p>\n<p>问题：</p>\n<p>1、 部署时出现：Error: EACCES, open ‘/Users/Desktop/hexo/public/js/script.js’</p>\n<p>原因：权限问题在部署命令前加sudo</p>\n<p>2、 deployer找不到git: ERROR Deployer not found: git</p>\n<p>解决方法:npm install hexo-deployer-git –save</p>\n<p>3、</p>\n<p>{ [Error:Cannot find module’./build/Release/DTraceProviderBindings’]code:’MODULE_NOT_FOUND’}{ [Error:Cannot find module’./build/default/DTraceProviderBindings’]code:’MODULE_NOT_FOUND’}{ [Error:Cannot find module’./build/Debug/DTraceProviderBindings’]code:’MODULE_NOT_FOUND’}</p>\n<p>解决方法：</p>\n<p>npminstall hexo –no-optional</p>\n<p>4、npm install卡住不动</p>\n<p>使用cnpm加速npm(原文地址：<a href=\"https://cnodejs.org/topic/5338c5db7cbade005b023c98\" target=\"_blank\" rel=\"external\">https://cnodejs.org/topic/5338c5db7cbade005b023c98</a>)</p>\n<p>npm–registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"external\">https://registry.npm.taobao.org</a> install koa</p>\n","excerpt":"<p>hexo–搭建</p>\n<p>前言<br>Hexo是一个很好的博客，个人觉得他的界面干净利落，阅读体验也是很好。初次接触Hexo是在朋友的介绍下才知道的，hexo是需要手动搭建（觉得B格很高），在朋友的帮助下也终于是完成了。</p>\n<p>开篇记录一下搭建的过程希望能帮助到浏览到这里的朋友<br>","more":"<br>我的系统为OS X，windows也可以参考。</p>\n<p>简介</p>\n<p>Hexo是一个开源的静态博客生成器，用node.js开发，作者是台湾大学生tommy351。</p>\n<p>思路总结</p>\n<p>安装过程中如果出现问题请到最后面查看问题总结，或许能帮助你解决问题。</p>\n<p>环境配置</p>\n<p>安装Git</p>\n<p>安装过Xcode可以直接跳过这步，因为Xcode自带Git</p>\n<p>Git有很多，Mac和Windows都可以直接到git-scm官网下载安装</p>\n<p>安装node.js</p>\n<p>奉上Macnode-v4.2.2.pkg安装包。</p>\n<p>这两个软件的安装步骤就不多做介绍，一直点下一步就好</p>\n<p>安装</p>\n<p>安装hexo</p>\n<p>sudo npminstall-ghexo</p>\n<p>初始化</p>\n<p>我们可以创建一个新文件夹作为hexo的安装目录，把所有的hexo文件都放里面，主要是为了方便管理。</p>\n<p>初始化有两种方式：</p>\n<p>直接指定目录</p>\n<p>hexo init folderfolder:是指定目录的文件路径。例：/Documents/hexo</p>\n<p>进入指定目录(cd /文件夹路径)</p>\n<p>hexoinit</p>\n<p>终端执行命令后显示的结果：</p>\n<p>[info] Copying data[info] You are almost done! Don’t forgettorun<code>npm install</code>beforestart bloggingwithHexo!</p>\n<p>安装依赖包</p>\n<p>sudo npminstall</p>\n<p>生成静态页面</p>\n<p>cd 到你的hexo安装目录（工作目录），执行如下命令</p>\n<p>hexogenerate简写 hexog</p>\n<p>必须到你新建的hexo安装目录下执行，否则不成功</p>\n<p>本地启动测试</p>\n<p>hexoserver简写 hexo s</p>\n<p>到此本地服务已经完成，可以再浏览器中输入<a href=\"http://localhost:4000进行查看。接下来需要把我们创建的静态页面托管到github上，别人才能访问到\">http://localhost:4000进行查看。接下来需要把我们创建的静态页面托管到github上，别人才能访问到</a></p>\n<p>部署到Github</p>\n<p>注册Github账号</p>\n<p>这里就不再赘述，已有Github账号可以跳过此步骤。</p>\n<p>新建repository(仓库)</p>\n<p>登陆Github账号后，点击右上角的“+”号按钮，选择“New repository”</p>\n<p>在Create a new repository界面填写格式如下图所示: 用户名.github.io</p>\n<p>填写完成点Create repository创建完成</p>\n<p>生成SSH Keys：</p>\n<p>我们如何让本地git项目与远程的github建立联系？这时候就要用到SSH Keys</p>\n<p>1、生成SSH Keys</p>\n<p>使用ssh-keygen命令生成密钥对</p>\n<p>ssh-keygen -t rsa -C”这里是你申请Github账号时的邮箱”</p>\n<p>然后系统会要你输入密码：（我们输入的密码会在你提交项目的时候使用）</p>\n<p>Enter passphrase (emptyforno passphrase):&lt;输入加密串&gt;Enter same passphrase again:&lt;再次输入加密串&gt;</p>\n<p>（终端提示生成的文件路径）找到你生成的密钥找到id_rsa.pub用终端进入编辑，复制密钥。</p>\n<p>2、添加你的SSH Key到ssh-agent</p>\n<p>添加你的SSH Key到ssh-agent</p>\n<p>//在后台打开 ssh-agenteval”$(ssh-agent -s)”添加你的SSH Key到ssh-agentssh-add ~/.ssh/id_rsa</p>\n<p>添加SSH Key到Github：</p>\n<p>1、添加SSH Key</p>\n<p>通过命令复制SSH Key内容到系统剪贴板</p>\n<p>pbcopy &lt; ~/.ssh/id_rsa.pub</p>\n<p>登陆Github,点击右侧用户按钮，选择Settings</p>\n<p>点击 Add SSH key 按钮，将复制的密钥粘贴到 Key 栏</p>\n<p>2、测试能不能链接成功</p>\n<p>测试</p>\n<p>ssh-T git@github.com</p>\n<p>执行结果</p>\n<p>Permanently addedtheRSA host keyforIP address ‘192.30.252.130’tothelistofknown hosts.Are you sure you wanttocontinueconnecting (yes/no)?&lt;输入yes&gt;Hi username! You’ve successfully authenticated,butGitHubdoesnot</p>\n<p>现在你已经可以通过SSH链接到Github了</p>\n<p>如果有问题，请再配置。参考网站</p>\n<p>生成SSH Keys</p>\n<p>Generating SSH Keys</p>\n<p>Error: Permission denied (publickey)错误</p>\n<p>Error: Permission denied (publickey)</p>\n<p>设置你的用户名和密码：</p>\n<p>Git会根据用户的名字和邮箱来记录提交，GitHub也是用这些信息来做权限的处理。</p>\n<p>git config –global user.name”这里是你申请Github账号时的name”git config –global user.email”这里是你申请Github账号时的邮箱”</p>\n<p>部署</p>\n<p>编辑 _config.yml(在你的工作目录下)，把下面的your_username换成你的github用户名</p>\n<p>deploy:type: gitrepo:<a href=\"https://github.com/your_username/your_username.github.io.gitbranch\">https://github.com/your_username/your_username.github.io.gitbranch</a>: master</p>\n<p>执行部署命令</p>\n<p>hexod-ghexogenerate和 hexo deploy 合写</p>\n<p>问题：</p>\n<p>1、 部署时出现：Error: EACCES, open ‘/Users/Desktop/hexo/public/js/script.js’</p>\n<p>原因：权限问题在部署命令前加sudo</p>\n<p>2、 deployer找不到git: ERROR Deployer not found: git</p>\n<p>解决方法:npm install hexo-deployer-git –save</p>\n<p>3、</p>\n<p>{ [Error:Cannot find module’./build/Release/DTraceProviderBindings’]code:’MODULE_NOT_FOUND’}{ [Error:Cannot find module’./build/default/DTraceProviderBindings’]code:’MODULE_NOT_FOUND’}{ [Error:Cannot find module’./build/Debug/DTraceProviderBindings’]code:’MODULE_NOT_FOUND’}</p>\n<p>解决方法：</p>\n<p>npminstall hexo –no-optional</p>\n<p>4、npm install卡住不动</p>\n<p>使用cnpm加速npm(原文地址：<a href=\"https://cnodejs.org/topic/5338c5db7cbade005b023c98\">https://cnodejs.org/topic/5338c5db7cbade005b023c98</a>)</p>\n<p>npm–registry=<a href=\"https://registry.npm.taobao.org\">https://registry.npm.taobao.org</a> install koa</p>"},{"title":"我出上联，你答下联","date":"2016-11-22T02:24:40.000Z","_content":"\n\n熊猫宝贝\n今天下班回到家，男票问了我一个很难很难的问题，我百思不得其解，所以来这里求助聪明的你们啦！这是个关于对联的问题。\n\n上联：熊猫的胸毛是熊毛\n\n下联是什么呢？\n\n小伙伴们，我在评论区等你们哦\n熊猫宝贝\n","source":"_posts/shang.md","raw":"---\ntitle: 我出上联，你答下联\ndate: 2016-11-21 21:24:40\ntags: 散文\n---\n\n\n熊猫宝贝\n今天下班回到家，男票问了我一个很难很难的问题，我百思不得其解，所以来这里求助聪明的你们啦！这是个关于对联的问题。\n\n上联：熊猫的胸毛是熊毛\n\n下联是什么呢？\n\n小伙伴们，我在评论区等你们哦\n熊猫宝贝\n","slug":"shang","published":1,"updated":"2016-11-23T02:35:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civuk3oto000glepvp4u86ply","content":"<p>熊猫宝贝<br>今天下班回到家，男票问了我一个很难很难的问题，我百思不得其解，所以来这里求助聪明的你们啦！这是个关于对联的问题。</p>\n<p>上联：熊猫的胸毛是熊毛</p>\n<p>下联是什么呢？</p>\n<p>小伙伴们，我在评论区等你们哦<br>熊猫宝贝</p>\n","excerpt":"","more":"<p>熊猫宝贝<br>今天下班回到家，男票问了我一个很难很难的问题，我百思不得其解，所以来这里求助聪明的你们啦！这是个关于对联的问题。</p>\n<p>上联：熊猫的胸毛是熊毛</p>\n<p>下联是什么呢？</p>\n<p>小伙伴们，我在评论区等你们哦<br>熊猫宝贝</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"civuk3osy0001lepvj5n6f6e0","tag_id":"civuk3ot70004lepvhjf4njm6","_id":"civuk3ote000alepvgr6iu2qk"},{"post_id":"civuk3ot20003lepve3f42mum","tag_id":"civuk3ote0009lepvkvlt143w","_id":"civuk3otn000flepvwz4fs6us"},{"post_id":"civuk3otm000elepvwl3s40rw","tag_id":"civuk3ote0009lepvkvlt143w","_id":"civuk3otr000ilepvlnhpntfl"},{"post_id":"civuk3otc0006lepvpqk99ufj","tag_id":"civuk3otm000dlepv5zbtofaq","_id":"civuk3ots000jlepvtgmnlv0i"},{"post_id":"civuk3otd0007lepv4ggrs0r1","tag_id":"civuk3otm000dlepv5zbtofaq","_id":"civuk3ots000llepvjlasek5t"},{"post_id":"civuk3otd0008lepvvga3tzzl","tag_id":"civuk3otm000dlepv5zbtofaq","_id":"civuk3ott000nlepvot0lxvzn"},{"post_id":"civuk3otl000clepvhcdvbt5u","tag_id":"civuk3ots000mlepvuhc8xzl9","_id":"civuk3otu000qlepvwe0fbfzf"},{"post_id":"civuk3otl000clepvhcdvbt5u","tag_id":"civuk3ott000olepvloevfkm7","_id":"civuk3otu000rlepv3u0djrf4"},{"post_id":"civuk3oto000glepvp4u86ply","tag_id":"civuk3ott000plepvaqn9t4ir","_id":"civuk3otu000slepvninya50n"}],"Tag":[{"name":"css","_id":"civuk3ot70004lepvhjf4njm6"},{"name":"nodejs","_id":"civuk3ote0009lepvkvlt143w"},{"name":"hexo","_id":"civuk3otm000dlepv5zbtofaq"},{"name":"node","_id":"civuk3ots000mlepvuhc8xzl9"},{"name":"Another Tag","_id":"civuk3ott000olepvloevfkm7"},{"name":"散文","_id":"civuk3ott000plepvaqn9t4ir"}]}}